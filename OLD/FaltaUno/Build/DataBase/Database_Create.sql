/*
Deployment script for Database_1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Database_1"
:setvar DefaultFilePrefix "Database_1"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[UserBondScore]...';


GO
CREATE TABLE [dbo].[UserBondScore] (
    [UserID]     BIGINT NOT NULL,
    [BondUserID] BIGINT NOT NULL,
    [Score]      INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([BondUserID] ASC, [UserID] ASC)
);


GO
PRINT N'Creating [dbo].[Headquarters]...';


GO
CREATE TABLE [dbo].[Headquarters] (
    [HeadquarterID] INT            IDENTITY (1, 1) NOT NULL,
    [LocationID]    BIGINT         NULL,
    [SportID]       TINYINT        NULL,
    [Name]          NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([HeadquarterID] ASC)
);


GO
PRINT N'Creating [dbo].[Locations]...';


GO
CREATE TABLE [dbo].[Locations] (
    [LocationID]        BIGINT         IDENTITY (1, 1) NOT NULL,
    [SportID]           TINYINT        NULL,
    [GroupMemberID]     INT            NOT NULL,
    [UserID]            BIGINT         NULL,
    [Display]           NVARCHAR (255) NULL,
    [Lat]               FLOAT (53)     NULL,
    [Lng]               FLOAT (53)     NULL,
    [Value]             NVARCHAR (255) NULL,
    [Country]           NVARCHAR (255) NULL,
    [City]              NVARCHAR (255) NULL,
    [State]             NVARCHAR (255) NULL,
    [Address]           NVARCHAR (255) NULL,
    [AddressNumber]     NVARCHAR (255) NULL,
    [AddressFloor]      NVARCHAR (255) NULL,
    [AddressApartament] NVARCHAR (255) NULL,
    [PostalCode]        NVARCHAR (50)  NULL,
    CONSTRAINT [PK_Locations] PRIMARY KEY CLUSTERED ([LocationID] ASC)
);


GO
PRINT N'Creating [dbo].[Sports]...';


GO
CREATE TABLE [dbo].[Sports] (
    [SportID] TINYINT       NOT NULL,
    [Value]   VARCHAR (255) NOT NULL,
    [Name]    VARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([SportID] ASC)
);


GO
PRINT N'Creating [dbo].[Fields]...';


GO
CREATE TABLE [dbo].[Fields] (
    [FieldID]     INT            NOT NULL,
    [SportID]     TINYINT        NOT NULL,
    [Value]       NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (255) NOT NULL,
    [Default]     BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([FieldID] ASC)
);


GO
PRINT N'Creating [dbo].[Players]...';


GO
CREATE TABLE [dbo].[Players] (
    [PlayerID]        BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserID]          BIGINT         NOT NULL,
    [SportID]         INT            NOT NULL,
    [Alias]           NVARCHAR (255) NULL,
    [Active]          BIT            NOT NULL,
    [Deleted]         BIT            NOT NULL,
    [DateTimeCreated] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([PlayerID] ASC)
);


GO
PRINT N'Creating [dbo].[Matches]...';


GO
CREATE TABLE [dbo].[Matches] (
    [MatchID]          BIGINT         IDENTITY (1, 1) NOT NULL,
    [SportID]          TINYINT        NOT NULL,
    [Name]             VARCHAR (255)  NOT NULL,
    [LocationID]       BIGINT         NULL,
    [HeadquarterID]    BIGINT         NULL,
    [FieldID]          INT            NULL,
    [Public]           TINYINT        NULL,
    [MatchDateTime]    DATETIME       NOT NULL,
    [MaxPlayers]       TINYINT        NULL,
    [MinPlayers]       TINYINT        NULL,
    [LimitlessPlayers] BIT            NOT NULL,
    [MatchTypeID]      SMALLINT       NULL,
    [ChallengeTypeID]  TINYINT        NOT NULL,
    [AverageAge]       INT            NULL,
    [MatchStateID]     TINYINT        NOT NULL,
    [PlayerID]         BIGINT         NOT NULL,
    [Comments]         NVARCHAR (MAX) NULL,
    [RegisterUserID]   BIGINT         NOT NULL,
    [Deleted]          BIT            NOT NULL,
    [DateTimeCreated]  DATETIME       NOT NULL,
    CONSTRAINT [Matches_PK] PRIMARY KEY CLUSTERED ([MatchID] ASC)
);


GO
PRINT N'Creating [dbo].[MatchPlayerRequestStates]...';


GO
CREATE TABLE [dbo].[MatchPlayerRequestStates] (
    [MatchPlayerRequestStateID] TINYINT        NOT NULL,
    [Value]                     NVARCHAR (50)  NOT NULL,
    [Description]               NVARCHAR (255) NOT NULL,
    [DefaultComment]            NVARCHAR (255) NOT NULL,
    [Type]                      CHAR (1)       NOT NULL,
    PRIMARY KEY CLUSTERED ([MatchPlayerRequestStateID] ASC)
);


GO
PRINT N'Creating [dbo].[MatchPlayerRequests]...';


GO
CREATE TABLE [dbo].[MatchPlayerRequests] (
    [MatchPlayerRequestID]      BIGINT     IDENTITY (1, 1) NOT NULL,
    [MatchID]                   BIGINT     NOT NULL,
    [PlayerRequestSenderID]     BIGINT     NOT NULL,
    [PlayerRequestReceiverID]   BIGINT     NOT NULL,
    [CommentID]                 BIGINT     NULL,
    [MatchPlayerRequestStateID] NCHAR (10) NOT NULL,
    [RecieveDate]               DATETIME   NOT NULL,
    [LastStateChangeDate]       DATETIME   NOT NULL,
    PRIMARY KEY CLUSTERED ([MatchPlayerRequestID] ASC)
);


GO
PRINT N'Creating [dbo].[MatchTypes]...';


GO
CREATE TABLE [dbo].[MatchTypes] (
    [MatchTypeID]     INT            IDENTITY (1, 1) NOT NULL,
    [SportID]         TINYINT        NOT NULL,
    [Value]           NVARCHAR (50)  NOT NULL,
    [Description]     NVARCHAR (255) NOT NULL,
    [Default]         BIT            NOT NULL,
    [DefaultFieldID]  INT            NULL,
    [UniqueField]     BIT            NOT NULL,
    [PlayersQuantity] TINYINT        NULL,
    PRIMARY KEY CLUSTERED ([MatchTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[MatchStates]...';


GO
CREATE TABLE [dbo].[MatchStates] (
    [MatchStateID] TINYINT       NOT NULL,
    [Value]        NVARCHAR (50) NOT NULL,
    [Description]  NVARCHAR (50) NOT NULL,
    [Closed]       BIT           NOT NULL,
    [Hot]          BIT           NOT NULL,
    [Order]        TINYINT       NOT NULL,
    PRIMARY KEY CLUSTERED ([MatchStateID] ASC)
);


GO
PRINT N'Creating [dbo].[ChallengeTypes]...';


GO
CREATE TABLE [dbo].[ChallengeTypes] (
    [ChallengeTypeID] TINYINT       NOT NULL,
    [Value]           NVARCHAR (50) NOT NULL,
    [Description]     NVARCHAR (50) NOT NULL,
    [Default]         BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([ChallengeTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[MatchTeamRequests]...';


GO
CREATE TABLE [dbo].[MatchTeamRequests] (
    [MatchTeamRequestID]    BIGINT     NOT NULL,
    [MatchID]               BIGINT     NOT NULL,
    [TeamRequestSenderID]   INT        NOT NULL,
    [TeamRequestReceiverID] INT        NOT NULL,
    [CommentID]             BIGINT     NULL,
    [RequestStateID]        NCHAR (10) NOT NULL,
    [RecieveDate]           DATETIME   NOT NULL,
    [LastStateChangeDate]   DATETIME   NULL,
    PRIMARY KEY CLUSTERED ([MatchTeamRequestID] ASC)
);


GO
PRINT N'Creating [dbo].[PlayerChallengeTypes]...';


GO
CREATE TABLE [dbo].[PlayerChallengeTypes] (
    [ChallengeTypeID] TINYINT NOT NULL,
    [PlayerID]        BIGINT  NOT NULL,
    CONSTRAINT [PK_PlayerChallengeTypes] PRIMARY KEY CLUSTERED ([PlayerID] ASC, [ChallengeTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[PlayerFieldPositions]...';


GO
CREATE TABLE [dbo].[PlayerFieldPositions] (
    [FieldPositionID] INT    NOT NULL,
    [PlayerID]        BIGINT NOT NULL,
    CONSTRAINT [PK_PlayerFieldPositions] PRIMARY KEY CLUSTERED ([FieldPositionID] ASC, [PlayerID] ASC)
);


GO
PRINT N'Creating [dbo].[PlayerFields]...';


GO
CREATE TABLE [dbo].[PlayerFields] (
    [PlayerID] BIGINT NOT NULL,
    [FieldID]  INT    NOT NULL,
    CONSTRAINT [PK_PlayerFields] PRIMARY KEY CLUSTERED ([FieldID] ASC, [PlayerID] ASC)
);


GO
PRINT N'Creating [dbo].[FieldPositions]...';


GO
CREATE TABLE [dbo].[FieldPositions] (
    [FieldPositionID] INT            NOT NULL,
    [FieldID]         INT            NOT NULL,
    [Description]     NVARCHAR (255) NOT NULL,
    [Abbreviation]    NCHAR (10)     NULL,
    PRIMARY KEY CLUSTERED ([FieldPositionID] ASC)
);


GO
PRINT N'Creating [dbo].[MatchPlayers]...';


GO
CREATE TABLE [dbo].[MatchPlayers] (
    [MatchID]  BIGINT NOT NULL,
    [PlayerID] BIGINT NOT NULL,
    PRIMARY KEY CLUSTERED ([PlayerID] ASC, [MatchID] ASC)
);


GO
PRINT N'Creating [dbo].[UserPrivacyDefault]...';


GO
CREATE TABLE [dbo].[UserPrivacyDefault] (
    [UserPrivacyDefaultID] INT           NOT NULL,
    [Entity]               VARCHAR (255) NOT NULL,
    [Property]             VARCHAR (255) NOT NULL,
    [DefValue]             CHAR (1)      NOT NULL,
    PRIMARY KEY CLUSTERED ([UserPrivacyDefaultID] ASC)
);


GO
PRINT N'Creating [dbo].[UserPrivacy]...';


GO
CREATE TABLE [dbo].[UserPrivacy] (
    [UserPrivacyID]        BIGINT   IDENTITY (1, 1) NOT NULL,
    [UserID]               BIGINT   NOT NULL,
    [UserPrivacyDefaultID] INT      NOT NULL,
    [Value]                CHAR (1) NOT NULL,
    PRIMARY KEY CLUSTERED ([UserPrivacyID] ASC)
);


GO
PRINT N'Creating [dbo].[Comments]...';


GO
CREATE TABLE [dbo].[Comments] (
    [CommentID] BIGINT        IDENTITY (1, 1) NOT NULL,
    [Text]      VARCHAR (MAX) NOT NULL,
    [UserID]    BIGINT        NOT NULL,
    [Date]      DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CommentID] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserID]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [ImplementationID]  INT           NOT NULL,
    [DefaultSportID]    TINYINT       NULL,
    [LastActiveSportID] TINYINT       NULL,
    [DateTimeCreated]   DATETIME      NOT NULL,
    [Deleted]           BIT           NOT NULL,
    [DefaultLanguage]   VARCHAR (2)   NULL,
    [Prefix]            VARCHAR (255) NULL,
    [Name]              VARCHAR (255) NULL,
    [SecondNames]       VARCHAR (255) NULL,
    [LastName]          VARCHAR (255) NULL,
    [Suffix]            VARCHAR (255) NULL,
    [Alias]             VARCHAR (255) NULL,
    [MobileNumber]      VARCHAR (255) NULL,
    [LinePhoneNumber]   VARCHAR (255) NULL,
    [WebAddress]        VARCHAR (255) NULL,
    [BirthDate]         DATETIME      NULL,
    [Height]            SMALLINT      NULL,
    [Weight]            SMALLINT      NULL,
    [Avatar]            VARCHAR (255) NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([UserID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating unnamed constraint on [dbo].[UserBondScore]...';


GO
ALTER TABLE [dbo].[UserBondScore]
    ADD DEFAULT 0 FOR [Score];


GO
PRINT N'Creating unnamed constraint on [dbo].[Locations]...';


GO
ALTER TABLE [dbo].[Locations]
    ADD DEFAULT 0 FOR [GroupMemberID];


GO
PRINT N'Creating unnamed constraint on [dbo].[Fields]...';


GO
ALTER TABLE [dbo].[Fields]
    ADD DEFAULT 0 FOR [Default];


GO
PRINT N'Creating [dbo].[Players_Active_Default]...';


GO
ALTER TABLE [dbo].[Players]
    ADD CONSTRAINT [Players_Active_Default] DEFAULT 1 FOR [Active];


GO
PRINT N'Creating [dbo].[Players_Deleted_Default]...';


GO
ALTER TABLE [dbo].[Players]
    ADD CONSTRAINT [Players_Deleted_Default] DEFAULT 0 FOR [Deleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[Players]...';


GO
ALTER TABLE [dbo].[Players]
    ADD DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Matches]...';


GO
ALTER TABLE [dbo].[Matches]
    ADD DEFAULT 0 FOR [Public];


GO
PRINT N'Creating [dbo].[Matches_LimitlessPlayers_Default]...';


GO
ALTER TABLE [dbo].[Matches]
    ADD CONSTRAINT [Matches_LimitlessPlayers_Default] DEFAULT 0 FOR [LimitlessPlayers];


GO
PRINT N'Creating [dbo].[Matches_ChallengeTypeID_Default]...';


GO
ALTER TABLE [dbo].[Matches]
    ADD CONSTRAINT [Matches_ChallengeTypeID_Default] DEFAULT 1 FOR [ChallengeTypeID];


GO
PRINT N'Creating [dbo].[Matches_MatchStateID_Default]...';


GO
ALTER TABLE [dbo].[Matches]
    ADD CONSTRAINT [Matches_MatchStateID_Default] DEFAULT 1 FOR [MatchStateID];


GO
PRINT N'Creating [dbo].[Matches_Deleted_Default]...';


GO
ALTER TABLE [dbo].[Matches]
    ADD CONSTRAINT [Matches_Deleted_Default] DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating [dbo].[Matches_DateTimeCreated_Default]...';


GO
ALTER TABLE [dbo].[Matches]
    ADD CONSTRAINT [Matches_DateTimeCreated_Default] DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[MatchPlayerRequests]...';


GO
ALTER TABLE [dbo].[MatchPlayerRequests]
    ADD DEFAULT 1 FOR [MatchPlayerRequestStateID];


GO
PRINT N'Creating unnamed constraint on [dbo].[MatchPlayerRequests]...';


GO
ALTER TABLE [dbo].[MatchPlayerRequests]
    ADD DEFAULT GETUTCDATE() FOR [RecieveDate];


GO
PRINT N'Creating [dbo].[MatchTypes_Default_Default]...';


GO
ALTER TABLE [dbo].[MatchTypes]
    ADD CONSTRAINT [MatchTypes_Default_Default] DEFAULT 0 FOR [Default];


GO
PRINT N'Creating [dbo].[MatchTypes_UniqueField_Default]...';


GO
ALTER TABLE [dbo].[MatchTypes]
    ADD CONSTRAINT [MatchTypes_UniqueField_Default] DEFAULT 0 FOR [UniqueField];


GO
PRINT N'Creating [dbo].[MatchStates_Closed_Default]...';


GO
ALTER TABLE [dbo].[MatchStates]
    ADD CONSTRAINT [MatchStates_Closed_Default] DEFAULT 0 FOR [Closed];


GO
PRINT N'Creating [dbo].[MatchStates_Hot_Default]...';


GO
ALTER TABLE [dbo].[MatchStates]
    ADD CONSTRAINT [MatchStates_Hot_Default] DEFAULT 0 FOR [Hot];


GO
PRINT N'Creating unnamed constraint on [dbo].[ChallengeTypes]...';


GO
ALTER TABLE [dbo].[ChallengeTypes]
    ADD DEFAULT 0 FOR [Default];


GO
PRINT N'Creating [dbo].[MatchTeamRequests_RequestStateID_Default]...';


GO
ALTER TABLE [dbo].[MatchTeamRequests]
    ADD CONSTRAINT [MatchTeamRequests_RequestStateID_Default] DEFAULT 1 FOR [RequestStateID];


GO
PRINT N'Creating [dbo].[MatchTeamRequests_ReceiveData_Default]...';


GO
ALTER TABLE [dbo].[MatchTeamRequests]
    ADD CONSTRAINT [MatchTeamRequests_ReceiveData_Default] DEFAULT GETUTCDATE() FOR [RecieveDate];


GO
PRINT N'Creating [dbo].[Comment_Date_Default]...';


GO
ALTER TABLE [dbo].[Comments]
    ADD CONSTRAINT [Comment_Date_Default] DEFAULT GETUTCDATE() FOR [Date];


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [ImplementationID];


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [Deleted];


GO
PRINT N'Creating [dbo].[FK_UserBondScore_Users_UserID]...';


GO
ALTER TABLE [dbo].[UserBondScore]
    ADD CONSTRAINT [FK_UserBondScore_Users_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserBondScore_Users_BondUserID]...';


GO
ALTER TABLE [dbo].[UserBondScore]
    ADD CONSTRAINT [FK_UserBondScore_Users_BondUserID] FOREIGN KEY ([BondUserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_Headquarters_Locations]...';


GO
ALTER TABLE [dbo].[Headquarters]
    ADD CONSTRAINT [FK_Headquarters_Locations] FOREIGN KEY ([LocationID]) REFERENCES [dbo].[Locations] ([LocationID]);


GO
PRINT N'Creating [dbo].[FK_Headquarters_Sports]...';


GO
ALTER TABLE [dbo].[Headquarters]
    ADD CONSTRAINT [FK_Headquarters_Sports] FOREIGN KEY ([SportID]) REFERENCES [dbo].[Sports] ([SportID]);


GO
PRINT N'Creating [dbo].[FK_Locations_Sports]...';


GO
ALTER TABLE [dbo].[Locations]
    ADD CONSTRAINT [FK_Locations_Sports] FOREIGN KEY ([SportID]) REFERENCES [dbo].[Sports] ([SportID]);


GO
PRINT N'Creating [dbo].[FK_Locations_Users]...';


GO
ALTER TABLE [dbo].[Locations]
    ADD CONSTRAINT [FK_Locations_Users] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_Fields_Sports_SportID]...';


GO
ALTER TABLE [dbo].[Fields]
    ADD CONSTRAINT [FK_Fields_Sports_SportID] FOREIGN KEY ([SportID]) REFERENCES [dbo].[Sports] ([SportID]);


GO
PRINT N'Creating [dbo].[FK_Players_Users_UserID]...';


GO
ALTER TABLE [dbo].[Players]
    ADD CONSTRAINT [FK_Players_Users_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_MatchPlayerRequests_Matches]...';


GO
ALTER TABLE [dbo].[MatchPlayerRequests]
    ADD CONSTRAINT [FK_MatchPlayerRequests_Matches] FOREIGN KEY ([MatchID]) REFERENCES [dbo].[Matches] ([MatchID]);


GO
PRINT N'Creating [dbo].[FK_MatchPlayerRequests_Players_Sender]...';


GO
ALTER TABLE [dbo].[MatchPlayerRequests]
    ADD CONSTRAINT [FK_MatchPlayerRequests_Players_Sender] FOREIGN KEY ([PlayerRequestSenderID]) REFERENCES [dbo].[Players] ([PlayerID]);


GO
PRINT N'Creating [dbo].[FK_MatchPlayerRequests_Players_Receiver]...';


GO
ALTER TABLE [dbo].[MatchPlayerRequests]
    ADD CONSTRAINT [FK_MatchPlayerRequests_Players_Receiver] FOREIGN KEY ([PlayerRequestReceiverID]) REFERENCES [dbo].[Players] ([PlayerID]);


GO
PRINT N'Creating [dbo].[FK_MatchTypes_Sports_SportID]...';


GO
ALTER TABLE [dbo].[MatchTypes]
    ADD CONSTRAINT [FK_MatchTypes_Sports_SportID] FOREIGN KEY ([SportID]) REFERENCES [dbo].[Sports] ([SportID]);


GO
PRINT N'Creating [dbo].[FK_MatchTypes_Fields_FieldID]...';


GO
ALTER TABLE [dbo].[MatchTypes]
    ADD CONSTRAINT [FK_MatchTypes_Fields_FieldID] FOREIGN KEY ([DefaultFieldID]) REFERENCES [dbo].[Fields] ([FieldID]);


GO
PRINT N'Creating [dbo].[FK_MatchPlayers_Matches]...';


GO
ALTER TABLE [dbo].[MatchPlayers]
    ADD CONSTRAINT [FK_MatchPlayers_Matches] FOREIGN KEY ([MatchID]) REFERENCES [dbo].[Matches] ([MatchID]);


GO
PRINT N'Creating [dbo].[FK_MatchPlayers_Players]...';


GO
ALTER TABLE [dbo].[MatchPlayers]
    ADD CONSTRAINT [FK_MatchPlayers_Players] FOREIGN KEY ([PlayerID]) REFERENCES [dbo].[Players] ([PlayerID]);


GO
PRINT N'Creating [dbo].[FK_UserPrivacy_UserPrivacyDefault]...';


GO
ALTER TABLE [dbo].[UserPrivacy]
    ADD CONSTRAINT [FK_UserPrivacy_UserPrivacyDefault] FOREIGN KEY ([UserPrivacyDefaultID]) REFERENCES [dbo].[UserPrivacyDefault] ([UserPrivacyDefaultID]);


GO
PRINT N'Creating [dbo].[FK_Users_Sports_DefaultSportID_SportID]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_Sports_DefaultSportID_SportID] FOREIGN KEY ([DefaultSportID]) REFERENCES [dbo].[Sports] ([SportID]);


GO
PRINT N'Creating [dbo].[FK_Users_Sports_LastActiveSportID_SportID]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_Sports_LastActiveSportID_SportID] FOREIGN KEY ([LastActiveSportID]) REFERENCES [dbo].[Sports] ([SportID]);


GO
PRINT N'Creating [dbo].[MatchesPlayers]...';


GO
CREATE VIEW [dbo].[MatchesPlayers]
	AS 
	
SELECT M.MatchID, P.PlayerID 
FROM 
	Players P
	INNER JOIN MatchPlayerRequests MPR ON MPR.PlayerRequestReceiverID = P.PlayerID
	INNER JOIN Matches M ON MPR.MatchID = M.MatchID
WHERE 
	MPR.MatchPlayerRequestStateID = 6 --confirmed
	OR MPR.MatchPlayerRequestStateID= 10 --completed
GO
PRINT N'Creating [dbo].[Scalar_MatchState_Finished]...';


GO
CREATE FUNCTION [dbo].[Scalar_MatchState_Finished]
()
RETURNS TINYINT
AS
BEGIN
	RETURN 5
END
GO
PRINT N'Creating [dbo].[Scalar_MatchState_InProgress]...';


GO
CREATE FUNCTION [dbo].[Scalar_MatchState_InProgress]
()
RETURNS TINYINT
AS
BEGIN
	RETURN 4
END
GO
PRINT N'Creating [dbo].[Scalar_MatchPlayerRequestState_Pending]...';


GO
CREATE FUNCTION [dbo].[Scalar_MatchPlayerRequestState_Pending]
()
RETURNS TINYINT
AS
BEGIN
	RETURN 1
END
GO
PRINT N'Creating [dbo].[Scalar_MatchPlayerRequestState_Expired]...';


GO
CREATE FUNCTION [dbo].[Scalar_MatchPlayerRequestState_Expired]
()
RETURNS TINYINT
AS
BEGIN
	RETURN 13
END
GO
PRINT N'Creating [dbo].[Scalar_MatchPlayerRequestState_Completed]...';


GO
CREATE FUNCTION [dbo].[Scalar_MatchPlayerRequestState_Completed]
()
RETURNS TINYINT
AS
BEGIN
	RETURN 10
END
GO
PRINT N'Creating [dbo].[Scalar_MatchPlayerRequestState_NotCompleted]...';


GO
CREATE FUNCTION [dbo].[Scalar_MatchPlayerRequestState_NotCompleted]
()
RETURNS TINYINT
AS
BEGIN
	RETURN 14
END
GO
PRINT N'Creating [dbo].[GetHeadquarters]...';


GO
CREATE PROCEDURE [dbo].[GetHeadquarters]
	@SportID TINYINT NULL,
	@SearchText NVARCHAR(255) NULL,
	@Lat FLOAT NULL,
	@Lng FLOAT NULL
AS
BEGIN

	DECLARE 
		@_SportID TINYINT = NULLIF(@SportID,0),
		@_SearchText NVARCHAR(255) = @SearchText,
		@_Lat FLOAT = NULLIF(@Lat,0),
		@_Lng FLOAT = NULLIF(@Lng,0)

	SELECT 
		HQ.[HeadquarterID],
		HQ.[SportID],
		HQ.[Name],
		HQ.[LocationID],
		L.[Lat] AS LocationLat,
		L.[Lng] AS LocationLng,
		L.[Display] AS LocationDisplay,
		L.[Value] AS LocationValue
	FROM
		Headquarters HQ
		LEFT JOIN Locations L ON HQ.LocationID = L.LocationID
	WHERE
		((L.[Lat] = @_Lat AND L.[Lng] = @_Lng)
			OR HQ.[Name] like '%' + ISNULL(@_SearchText,'') + '%')
		AND (HQ.[SportID] = ISNULL(@_SportID, HQ.[SportID]) OR HQ.[SportID] IS NULL)

END
GO
PRINT N'Creating [dbo].[AddLocation]...';


GO
CREATE PROCEDURE [dbo].[AddLocation]
	@SportID TINYINT NULL,
	@UserID BIGINT NULL,
	@GroupMemberID TINYINT = 0,
	@Display NVARCHAR(255) NULL,
	@Lat FLOAT NULL,
	@Lng FLOAT NULL,
	@Value NVARCHAR(255) NULL,
	@Country NVARCHAR(255) NULL,
	@City NVARCHAR(255) NULL,
	@State NVARCHAR(255) NULL,
	@Address NVARCHAR(255) NULL,
	@AddressNumber NVARCHAR(255) NULL, 
	@AddressFloor NVARCHAR(255) NULL,
	@AddressApartament NVARCHAR(255) NULL,
	@PostalCode NVARCHAR(255) NULL
AS
BEGIN

	INSERT INTO Locations
		([SportID],
		[UserID],
		[GroupMemberID],
		[Display],
		[Lat],
		[Lng],
		[Value],
		[Country],
		[City],
		[State],
		[Address],
		[AddressNumber], 
		[AddressFloor],
		[AddressApartament],
		[PostalCode])
	VALUES
		(@SportID,
		@UserID,
		@GroupMemberID,
		@Display,
		@Lat,
		@Lng,
		@Value,
		@Country,
		@City,
		@State,
		@Address,
		@AddressNumber, 
		@AddressFloor,
		@AddressApartament,
		@PostalCode)

	RETURN SCOPE_IDENTITY()


END
GO
PRINT N'Creating [dbo].[GetLocations]...';


GO
CREATE PROCEDURE [dbo].[GetLocations]
	@SearchText NVARCHAR(255) = NULL,
	@SportID TINYINT NULL,
	@GroupMemberID INT NULL,
	@UserID BIGINT NULL
AS
	SELECT 
		[LocationID],
		[SportID],
		[GroupMemberID], 
		[UserID],
		[Display], 
		[Lat],
		[Lng],
		[Value],
		[Country],
		[City],
		[State], 
		[Address],
		[AddressNumber], 
		[AddressFloor],
		[AddressApartament],
		[PostalCode]
	FROM
		Locations
	WHERE
		([GroupMemberID] = ISNULL(@GroupMemberID, [GroupMemberID])
			OR [GroupMemberID] = 0)
		AND ([UserID] = ISNULL(@UserID, [UserID])
			OR [UserID] IS NULL)
		AND ([SportID] = ISNULL(@SportID, [SportID])
			OR [SportID] IS NULL)
		AND ([Display] like '%' + ISNULL(@SearchText,'') + '%'
			OR [Address] like '%' + ISNULL(@SearchText,'') + '%')
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@UserID BIGINT
AS
BEGIN
	DECLARE 
		@_UserID BIGINT = @UserID,
		@LoginID BIGINT

	SELECT TOP 1 @LoginID = LoginID FROM LoginNames WHERE UserID = @_UserID

	DELETE FROM [Sessions] WHERE LoginID = @LoginID

	DELETE FROM LoginPasswords WHERE LoginID = @LoginID

	DELETE FROM LoginNames WHERE LoginID = @LoginID

	DELETE FROM UserIPAccessStatus WHERE UserID = @_UserID

	DELETE FROM Players WHERE UserID = @_UserID

	DELETE FROM Users WHERE UserID = @_UserID

END
GO
PRINT N'Creating [dbo].[GetPlayersByUserID]...';


GO
CREATE PROCEDURE [dbo].[GetPlayersByUserID]
	@UserID BIGINT
AS
	DECLARE @_UserID BIGINT = @UserID

	SELECT 
		*
	FROM
		Players
	WHERE
		UserID = @_UserID
		AND Deleted = 0
GO
PRINT N'Creating [dbo].[GetSport]...';


GO
CREATE PROCEDURE [dbo].[GetSport]
	@SportID tinyint
AS

	SELECT 
		SportId,
		[Value],
		Name
	FROM
		Sports
	WHERE
		SportID = @SportID
GO
PRINT N'Creating [dbo].[GetSports]...';


GO
CREATE PROCEDURE [dbo].[GetSports]
AS
	SELECT 
		SportId,
		[Value],
		Name
	FROM
		Sports
	ORDER BY
		SportID ASC
GO
PRINT N'Creating [dbo].[GetUserByEmail]...';


GO
CREATE PROCEDURE [dbo].[GetUserByEmail]
	@Email VARCHAR(255)
AS
	DECLARE @_Email VARCHAR(255) = @Email


	SELECT
		*
	FROM
		Users U
		INNER JOIN LoginNames L ON L.UserID = U.UserID
	WHERE
		 L.LoginName = @_Email
		AND U.Deleted = 0
GO
PRINT N'Creating [dbo].[GetPlayer]...';


GO
CREATE PROCEDURE [dbo].[GetPlayer]
	@PlayerID BIGINT
AS
	SET NOCOUNT ON

	SELECT * FROM Players WHERE PlayerID = @PlayerID
GO
PRINT N'Creating [dbo].[AddPlayer]...';


GO
CREATE PROCEDURE [dbo].[AddPlayer]
	@SportID INT, 
	@UserID BIGINT
AS
BEGIN

	IF NOT EXISTS(SELECT 1 FROM Players WHERE UserID = @UserID AND SportID = @SportID)
	BEGIN
		INSERT INTO PLAYERS
			(SportID,
			UserID)
		VALUES
			(@SportID,
			@UserID)

		RETURN SCOPE_IDENTITY()
	END
	
	RETURN -1

END
GO
PRINT N'Creating [dbo].[GetMatch]...';


GO
CREATE PROCEDURE dbo.GetMatch
	@MatchID BIGINT
AS

	SELECT * FROM MATCHES WHERE MatchID = @MatchID
GO
PRINT N'Creating [dbo].[AddMatch]...';


GO
CREATE PROCEDURE [dbo].[AddMatch]
	@SportID TINYINT,
	@Name VARCHAR(255), 
	@LocationID BIGINT NULL,
	@HeadquarterID INT NULL, 
	@FieldID INT NULL,
	@Public TINYINT = 0,
	@MatchDateTime DATETIME, 
	@MaxPlayers TINYINT NULL, 
	@MinPlayers TINYINT NULL, 
	@LimitlessPlayers BIT = 0, 
	@MatchTypeID TINYINT, 
	@ChallengeTypeID TINYINT,
	@AverageAge INT NULL, 
	@MatchStateID TINYINT = 1, 
	@PlayerID BIGINT,
	@Comments NVARCHAR(MAX) = NULL,
	@RegisterUserID BIGINT
AS
BEGIN

	INSERT INTO MATCHES
		(SportID,
		[Name],
		LocationID,
		HeadquarterID,
		FieldID,
		[Public],
		MatchDateTime,
		MaxPlayers,
		MinPlayers,
		LimitlessPlayers,
		MatchTypeID,
		ChallengeTypeID,
		AverageAge,
		MatchStateID,
		PlayerID,
		Comments,
		RegisterUserID)
	VALUES
		(@SportID,
		@Name,
		@LocationID,
		@HeadquarterID,
		@FieldID,
		@Public,
		@MatchDateTime,
		@MaxPlayers,
		@MinPlayers,
		@LimitlessPlayers,
		@MatchTypeID,
		@ChallengeTypeID,
		@AverageAge,
		@MatchStateID,
		@PlayerID,
		@Comments,
		@RegisterUserID)

	RETURN SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[GetUser]...';


GO
CREATE PROCEDURE [dbo].[GetUser]
	@UserID BIGINT
AS
BEGIN
	DECLARE @_UserID BIGINT = @UserID


	SELECT
		*
	FROM
		Users U
	WHERE
		UserID = @_UserID
		AND Deleted = 0
END
GO
PRINT N'Creating [dbo].[AddMatchPlayerRequest]...';


GO
CREATE PROCEDURE [dbo].[AddMatchPlayerRequest]
	@MatchID BIGINT,
	@PlayerRequestSenderID BIGINT,
	@PlayerRequestReceiverID BIGINT,
	@CommentID BIGINT = NULL,
	@MatchPlayerRequestStateID TINYINT
AS
BEGIN

	DECLARE @_Now DATETIME = GETUTCDATE()

	INSERT INTO MatchPlayerRequests
		(MatchID,
		PlayerRequestSenderID,
		PlayerRequestReceiverID,
		CommentID,
		MatchPlayerRequestStateID, 
		RecieveDate,
		LastStateChangeDate)
	VALUES
		(@MatchID,
		@PlayerRequestSenderID,
		@PlayerRequestReceiverID,
		@CommentID,
		@MatchPlayerRequestStateID,
		@_Now,
		@_Now)

	RETURN SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[GetMatchPlayerRequestStates]...';


GO
CREATE PROCEDURE [dbo].[GetMatchPlayerRequestStates]
AS
BEGIN
	SELECT * FROM MatchPlayerRequestStates
END
GO
PRINT N'Creating [dbo].[POP_MatchPlayerRequestStates]...';


GO
CREATE PROCEDURE [dbo].[POP_MatchPlayerRequestStates]
AS
BEGIN

	;MERGE INTO [dbo].[MatchPlayerRequestStates] AS Target
	USING (VALUES
		(1,'pending','Pendiente','El jugador todavía no a aceptado o rechazado la invitación','I'),
		(2,'tentative_not','Tal vez no pueda','Posibilemente no pueda ir a jugar, todavía no confirmó','T'),
		(3,'tentative','No sabe todavia','Tal vez pueda ir a jugar, todavía no confirmó','T'),
		(4,'tentative_yes','Tal vez pueda','Posiblemente pueda ir a jugar, todavía no confirmó','T'),
		(5,'proposal','Propone una modificacion','Propone cambiar algun detalle del partido','T'),
		(6,'confirmed','Confirmado','Confirmado que puede ir a jugar','P'),
		(7,'reconfirmation_required','Pendiente de reconfirmar','Habia confirmado anteriormente, pero no reconfirmo todavia el cambio dado','I'),
		(8,'rejected','Rechazado','Rechazó la solicitud, no puede ir a jugar','N'),
		(9,'cancelled','Cancelado','La solicitud fue cancelada','N'),
		(10,'completed','Finalizado','La solicitud a finalizado','C'),
		(11,'approval_required','Aprobacion pendiente','La solicitud todavia no fue aprobada por el creador del partido','I'),
		(12,'confirmed_substitute','Suplente','Jugador confirmado como suplente','P'),
		(13,'expired','Expirado','La solicitud a expirado','C'),
		(14,'not_completed','No jugado','No participó','C')
	) AS Source ([MatchPlayerRequestStateID],[Value],[Description],[DefaultComment],[Type])
	ON (Target.[MatchPlayerRequestStateID] = Source.[MatchPlayerRequestStateID])
	WHEN MATCHED THEN
		UPDATE 
		SET [Value] = Source.[Value],
			[Description] = Source.[Description],
			[DefaultComment] = Source.[DefaultComment],
			[Type] = Source.[Type]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([MatchPlayerRequestStateID],
			[Value],
			[Description],
			[DefaultComment],
			[Type])
		VALUES
			(Source.[MatchPlayerRequestStateID],
			Source.[Value],
			Source.[Description],
			Source.[DefaultComment],
			Source.[Type])
	WHEN NOT MATCHED BY SOURCE THEN
		DELETE;

END
GO
PRINT N'Creating [dbo].[POP_Sports]...';


GO
CREATE PROCEDURE [dbo].[POP_Sports]
AS
BEGIN

	;MERGE INTO [dbo].[Sports] AS Target
	USING (VALUES
		(1,'futbol','Futbol'),
		(2,'basket','Basquet'),
		(3,'volley','Volley'),
		(4,'tennis','Tenis'),
		(5,'squash','Squash'),
		(6,'rugby','Rugby'),
		(7,'american_futbol','Futbol Americano'),
		(8,'baseball','Baseball'),
		(9,'boxing','Boxeo'),
		(10,'golf','Golf'),
		(11,'handball','Handball'),
		(12,'hockey','Hockey'),
		(13,'table_tennis','Tenis de mesa')
	) AS Source ([SportID],[Value],[Name])
	ON (Target.[SportID] = Source.[SportID])
	WHEN MATCHED THEN
		UPDATE 
		SET [Value] = Source.[Value],
			[Name] = Source.[Name]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([SportID],
			[Value],
			[Name])
		VALUES
			(Source.[SportID],
			Source.[Value],
			Source.[Name]);
END
GO
PRINT N'Creating [dbo].[POP_MatchTypes]...';


GO
CREATE PROCEDURE [dbo].[POP_MatchTypes]
AS
BEGIN

	;MERGE INTO [dbo].[MatchTypes] AS Target
	USING (VALUES
		(1,'futbol_indoor','Futbol Sala',0,3,0),
		(1,'futbol_five','Futbol 5',1,4,0),
		(1,'futbol_seven','Futbol 7',0,4,0),
		(1,'futbol_big','Futbol 11',0,1,0),
		(1,'futbol_beach','Futbol Playa',0,5,1),
		(1,'futbol_tennis','Futbol Tenis',0,5,0),
		(1,'futbol_other','Otros',0,5,0),
		(2,'basket_other','Indistinto',1,6,0),
		(3,'volley_normal','Normal',1,9,0),
		(3,'volley_beach','Playa',0,10,1),
		(3,'volley_other','Otros',0,12,0),
		(4,'tennis_single','Singles',1,13,0),
		(4,'tennis_doubles','Dobles',0,13,0),
		(4,'tennis_other','Otros / Indistinto',0,16,0),
		(5,'squash_single','Singles',1,17,0),
		(5,'squash_vela','Vela',0,17,0),
		(5,'squash_doubles','Dobles',0,19,0),
		(5,'squash_other','Indistinto',0,21,0),
		(6,'rugby_union','Union (15)',1,22,0),
		(6,'rugby_league','League (13)',0,22,0),
		(6,'rugby_seven','Rugby de 7',0,22,0),
		(6,'rugby_other','Otros',0,27,0),
		(7,'american_other','Indistinto',1,28,1)
	) AS Source ([SportID],[Value],[Description],[Default],[DefaultFieldID],[UniqueField])
	ON (Target.[SportID] = Source.[SportID] AND Target.[Value] = Source.[Value] )
	WHEN MATCHED THEN
		UPDATE 
		SET [SportID] = Source.[SportID],
			[Value] = Source.[Value],
			[Description] = Source.[Description],
			[Default] = Source.[Default],
			[DefaultFieldID] = Source.[DefaultFieldID],
			[UniqueField] = Source.[UniqueField]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([SportID],
			[Value],
			[Description],
			[Default],
			[DefaultFieldID],
			[UniqueField])
		VALUES
			(Source.[SportID],
			Source.[Value],
			Source.[Description],
			Source.[Default],
			Source.[DefaultFieldID],
			Source.[UniqueField]);

END
GO
PRINT N'Creating [dbo].[POP_Headquarters]...';


GO
CREATE PROCEDURE [dbo].[POP_Headquarters]
AS
BEGIN

	;MERGE INTO [dbo].[Locations] AS Target
	USING (VALUES
		((SELECT S.SportID FROM Sports S WHERE S.[Value] = 'futbol'),-34.609812,-58.46125,'Av. Tte. Gral. Donato Álvarez 1481, C1416BTD CABA, Argentina','Av. Tte. Gral. Donato Álvarez 1481, C1416BTD CABA, Argentina'),
		((SELECT S.SportID FROM Sports S WHERE S.[Value] = 'basket'),-34.61858,-58.44764,'Estadio echeberria','Estadio echeberria'),
		((SELECT S.SportID FROM Sports S WHERE S.[Value] = 'volley'),-66.66666,-66.66666,'Calle Falsa 123','Calle Falsa 123'),
		(null,-34.61989,-58.41877,'México 3739, C1217 CABA, Argentina','México 3739, C1217 CABA, Argentina')
	) AS Source ([SportID],[Lat],[Lng],[Display],[Value])
	ON (ROUND(Target.Lat,4,1) = ROUND(Source.Lat,4,1) AND ROUND(Target.Lng,4,1) = ROUND(Source.Lng,4,1))
	WHEN MATCHED THEN
		UPDATE 
		SET	[SportID] = Source.[SportID],
			[Lat] = Source.[Lat],
			[Lng] = Source.[Lng],
			[Display] = Source.[Display],
			[Value] = Source.[Value]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([SportID],
			[Lat],
			[Lng],
			[Display],
			[Value])
		VALUES
			(Source.[SportID],
			Source.[Lat],
			Source.[Lng],
			Source.[Display],
			Source.[Value])
	
	;MERGE INTO [dbo].[Headquarters] AS Target
	USING (VALUES
			('Caballito Sport',(SELECT S.SportID FROM Sports S WHERE S.[Value] = 'futbol'), (SELECT TOP 1 L.LocationID FROM Locations L WHERE L.Display = 'Av. Tte. Gral. Donato Álvarez 1481, C1416BTD CABA, Argentina')),
			('Club Ferrocarril Oeste',(SELECT S.SportID FROM Sports S WHERE S.[Value] = 'basket'), (SELECT TOP 1 L.LocationID FROM Locations L WHERE L.Display = 'Estadio echeberria')),
			('Test HQ Sport 3 Falso',(SELECT S.SportID FROM Sports S WHERE S.[Value] = 'volley'), (SELECT TOP 1 L.LocationID FROM Locations L WHERE L.Display ='Calle Falsa 123')),
			('Test HQ Sport 3 BonaHouse',null, (SELECT TOP 1 L.LocationID FROM Locations L WHERE L.Display ='México 3739, C1217 CABA, Argentina' ))
		) AS Source ([Name],[SportID],[LocationID])
	ON (Target.[Name] = Source.[Name])
	WHEN MATCHED THEN
		UPDATE 
		SET	[Name] = Source.[Name],
			[SportID] = Source.[SportID],
			[LocationID] = Source.[LocationID]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([Name],
			[SportID],
			[LocationID])
		VALUES
			(Source.[Name],
			Source.[SportID],
			Source.[LocationID]);
END
GO
PRINT N'Creating [dbo].[POP_Fields]...';


GO
CREATE PROCEDURE [dbo].[POP_Fields]
AS
BEGIN

	;MERGE INTO [dbo].[Fields] AS Target
	USING (VALUES
		(1,1,'futbol_grass','Cesped',0),
		(2,1,'futbol_hard','Cemento',0),
		(3,1,'futbol_wood','Parket',0),
		(4,1,'futbol_sintetic','Sintetico',0),
		(5,1,'futbol_other','Indistinto / Otros',1),
		(6,2,'basket_wood','Madera',1),
		(7,2,'basket_hard','Cemento',0),
		(8,2,'basket_other','Indistinto / Otros',0),
		(9,3,'volley_normal','Normal',1),
		(10,3,'volley_beach','Playa',0),
		(11,3,'volley_minivol','Minivol',0),
		(12,3,'volley_other','Otros',0),
		(13,4,'tennis_single','Cesped',1),
		(14,4,'tennis_clay','Arcilla',0),
		(15,4,'tennis_clay','Dura',0),
		(16,4,'tennis_other','Indistinto',0),
		(17,5,'squash_english','Inglesa',1),
		(18,5,'squash_american','Americana',0),
		(19,5,'squash_doubles','Dobles',0),
		(20,5,'squash_cristal','Cristal',0),
		(21,5,'squash_other','Indistinto',0),
		(22,6,'rugby_grass','Cesped',1),
		(23,6,'rugby_sand','Arena',0),
		(24,6,'rugby_dust','Tierra',0),
		(25,6,'rugby_snow','Nieve',0),
		(26,6,'rugby_sintetic','Cesped artificial',0),
		(27,6,'rugby_other','Otros',0),
		(28,7,'american_other','Indistinto',1)
	) AS Source ([FieldID],[SportID],[Value],[Description],[Default])
	ON (Target.[FieldID] = Source.[FieldID])
	WHEN MATCHED THEN
		UPDATE 
		SET [SportID] = Source.[SportID],
			[Value] = Source.[Value],
			[Description] = Source.[Description],
			[Default] = Source.[Default]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([FieldID],
			[SportID],
			[Value],
			[Description],
			[Default])
		VALUES
			(Source.[FieldID],
			Source.[SportID],
			Source.[Value],
			Source.[Description],
			Source.[Default]);

END
GO
PRINT N'Creating [dbo].[POP_ChallengeTypes]...';


GO
CREATE PROCEDURE [dbo].[POP_ChallengeTypes]
AS
BEGIN

	;MERGE INTO [dbo].[ChallengeTypes] AS Target
	USING (VALUES
		(1,'friendly','Amistoso'),
		(2,'tournament','Torneo'),
		(3,'cup','Copa'),
		(4,'profesional','Profesional'),
		(5,'challenge','Desafío')
	) AS Source ([ChallengeTypeID],[Value],[Description])
	ON (Target.[ChallengeTypeID] = Source.[ChallengeTypeID])
	WHEN MATCHED THEN
		UPDATE 
		SET [Value] = Source.[Value],
			[Description] = Source.[Description]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([ChallengeTypeID],
			[Value],
			[Description])
		VALUES
			(Source.[ChallengeTypeID],
			Source.[Value],
			Source.[Description]);

	UPDATE
		ChallengeTypes
	SET
		[Default] = 1
	WHERE
		[ChallengeTypeID] = 1

END
GO
PRINT N'Creating [dbo].[POP_Translations]...';


GO
CREATE PROCEDURE [dbo].[POP_Translations]
AS
BEGIN
	;MERGE INTO [dbo].[Translations] AS Target
	USING (VALUES
		('ES','','UserAddressNotRegister',N'La dirección de correo electrónico no se encuentra registrada.')
		,('ES','','UserAlreadyRegister',N'La dirección de correo electrónico ya se encuentra registrada.')
		,('ES','','VerificationCodeNotMatch',N'El código de verificacion es incorrecto.')
		,('ES','','MandatoryEmail',N'La dirección de correo electrónico es obligatoria.')
		,('ES','','InvalidEmail',N'La dirección de correo electrónico es inválida.')
		,('ES','','PasswordMandatory',N'La contraseña es obligatoria.')
		,('ES','','Password should contain at least one lower case letter',N'La contraseña debe contener al menos una letra en minúscula.')
		,('ES','','Password should contain at least one upper case letter',N'La contraseña debe contener al menos una letra en mayúscula')
		,('ES','','Password should not be less than 8 characters or greater than 32 characters',N'La contraseña debe contener mas de 8 caracteres y menos de 32.')
		,('ES','','Password should contain at least one numeric value',N'La contraseña debe contener al menos un número.')
		,('ES','','EmailAlreadyRegister',N'La dirección de correo electrónico ya se encontraba registrada.')
		,('ES','','VerifyEmailTitle',N'Hay Equipo: Verificación de correo electrónico')
		,('ES','','UserOrPasswordInvalid',N'El usuario o la contraseña son incorrectos.')
		
		,('EN','','UserAddressNotRegister',N'The email address is not registered.')
		,('EN','','UserAlreadyRegister',N'The email address is already registered.')
		,('EN','','VerificationCodeNotMatch',N'The verification code is invalid.')
		,('EN','','MandatoryEmail',N'The email address is mandatory.')
		,('EN','','InvalidEmail',N'The email address is invalid.')
		,('EN','','PasswordMandatory',N'The password is mandatory.')
		,('EN','','EmailAlreadyRegister',N'The email address was already registered yet.')
		,('EN','','VerifyEmailTitle',N'Email address verification.')
	) AS Source ([LanguageCode],[Module],[ConstantName],[Translation])
	ON (Target.[LanguageCode] = Source.[LanguageCode] 
		AND Target.[Module] = Source.[Module]
		AND Target.[ConstantName] = Source.[ConstantName])
	WHEN MATCHED AND (
			NULLIF(Source.[Translation], Target.[Translation]) IS NOT NULL 
			OR NULLIF(Target.[Translation], Source.[Translation]) IS NOT NULL) THEN
		UPDATE 
		SET	[Translation] = Source.[Translation]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([LanguageCode],
			[Module],
			[ConstantName],
			[Translation])
		VALUES
			(Source.[LanguageCode],
			Source.[Module],
			Source.[ConstantName],
			Source.[Translation])
	WHEN NOT MATCHED BY SOURCE THEN
		DELETE;
END
GO
PRINT N'Creating [dbo].[GetMatchPlayerRequests]...';


GO
CREATE PROCEDURE [dbo].[GetMatchPlayerRequests]
	@MatchID BIGINT
AS
BEGIN
	DECLARE @_MatchID BIGINT = @MatchID

	SELECT *
	FROM
		MatchPlayerRequests
	WHERE
		MatchID = @_MatchID

END
GO
PRINT N'Creating [dbo].[GetChallengeTypes]...';


GO
CREATE PROCEDURE [dbo].[GetChallengeTypes]
AS
BEGIN

	SELECT * FROM 	ChallengeTypes 

END
GO
PRINT N'Creating [dbo].[GetFields]...';


GO
CREATE PROCEDURE [dbo].[GetFields]
	@SportID TINYINT = NULL
AS

	SELECT * 
	FROM 
		Fields 
	WHERE  
		@SportID IS NULL
			OR SportID = @SportID
GO
PRINT N'Creating [dbo].[GetMatchTypes]...';


GO
CREATE PROCEDURE [dbo].[GetMatchTypes]
	@SportID TINYINT = NULL
AS
BEGIN

	SELECT * 
	FROM 
		MatchTypes 
	WHERE  
		@SportID IS NULL
		OR SportID = @SportID

END
GO
PRINT N'Creating [dbo].[GetMatchStates]...';


GO
CREATE PROCEDURE [dbo].[GetMatchStates]
	@MatchStateID SMALLINT = NULL
AS

	SELECT * 
	FROM 
		MatchStates 
	WHERE  
		@MatchStateID IS NULL 
		OR MatchStateID = @MatchStateID
GO
PRINT N'Creating [dbo].[SearchMatch]...';


GO
CREATE PROCEDURE [dbo].[SearchMatch]
	@SportID TINYINT = NULL,
	@Name VARCHAR(255) = NULL,
	@PlayerID BIGINT = NULL,
	@MinAge TINYINT = NULL,
	@MaxAge TINYINT = NULL,
	@LocationID BIGINT = NULL,
	@HeadquarterID INT = NULL,
	@Lat FLOAT = NULL,
	@Lng FLOAT = NULL,
	@MatchTypeID SMALLINT = NULL,
	@FieldID INT = NULL,
	@ChallengeTypeID TINYINT = NULL,
	@StartDateTime DATETIME = NULL,
	@EndDateTime DATETIME = NULL,
	@Public BIT = NULL,
	@IsHotMatch BIT = NULL,
	@TOP SMALLINT = 20,
	@RadiusKM SMALLINT = 30
AS
BEGIN

	SET NOCOUNT ON

	DECLARE @_SportID TINYINT = @SportID,
		@_Name VARCHAR(255) = '%' + @Name + '%',
		@_PlayerID BIGINT = @PlayerID,
		@_MinAge TINYINT = @MinAge,
		@_MaxAge TINYINT = @MaxAge,
		@_LocationID BIGINT = @LocationID,
		@_HeadquarterID INT = @HeadquarterID,
		@_MatchTypeID SMALLINT = @MatchTypeID,
		@_FieldID TINYINT = @FieldID,
		@_ChallengeTypeID TINYINT = @ChallengeTypeID,
		@_MatchStartTime DATETIME = @StartDateTime,
		@_MatchEndTime DATETIME = @EndDateTime,
		@_Public BIT = @Public,
		@_IsHotMatch BIT = @IsHotMatch,
		@_GeoPosition GEOGRAPHY = NULL

	IF (@Lat IS NOT NULL AND @Lng IS NOT NULL) 
	BEGIN
		SET @_GeoPosition = geography::Point(@Lat, @Lng, 4326);
	END 
		
	SELECT TOP(@TOP) M.* 
	FROM
		Matches M
		INNER JOIN Locations L ON L.LocationID = M.LocationID AND (@_LocationID IS NULL OR @_LocationID = L.LocationID)
		INNER JOIN MatchPlayerRequests MPR ON MPR.MatchID = M.MatchID AND (@_PlayerID IS NULL OR @_PlayerID = MPR.PlayerRequestReceiverID)
		LEFT JOIN Headquarters H ON H.HeadquarterID = M.HeadquarterID AND (@_HeadquarterID IS NULL OR @_HeadquarterID = H.HeadquarterID)
	WHERE
		(@_SportID IS NULL OR M.SportID = @_SportID) 
		AND (@_Name IS NULL OR M.[Name] LIKE @_Name)
		AND (@_MinAge IS NULL OR @_MinAge < AverageAge)
		AND (@_MaxAge IS NULL OR @MaxAge > AverageAge)
		AND (@_GeoPosition IS NULL OR @_GeoPosition.STDistance(geography::Point(L.Lat, L.Lng, 4326)) < (@RadiusKM * 1000))
		AND (@_MatchStartTime IS NULL  OR M.MatchDateTime >= @_MatchStartTime)
		AND (@_MatchEndTime IS NULL OR M.MatchDateTime < @_MatchEndTime)
		AND ((CONVERT(time(0), @_MatchEndTime) < CONVERT(time(0), @_MatchStartTime)
			AND (@_MatchStartTime IS NULL OR CONVERT(time(0), M.MatchDateTime) >= CONVERT(time(0), @_MatchStartTime))
				OR (@_MatchEndTime IS NULL OR CONVERT(time(0), M.MatchDateTime) <= CONVERT(time(0), @_MatchEndTime))) 
			OR (CONVERT(time(0), @_MatchEndTime) >= CONVERT(time(0), @_MatchStartTime)
			AND (@_MatchStartTime IS NULL OR CONVERT(time(0), M.MatchDateTime) >= CONVERT(time(0), @_MatchStartTime))
				AND (@_MatchEndTime IS NULL OR CONVERT(time(0), M.MatchDateTime) <= CONVERT(time(0), @_MatchEndTime))) )
		AND (@_MatchTypeID IS NULL OR M.MatchTypeID = @_MatchTypeID )
		AND (@_FieldID IS NULL OR M.FieldID = @_FieldID)
--		AND (@_IsHotMatch IS NULL OR  M.IsHotMatch )
		AND (@_Public IS NULL OR M.[Public] = @_Public)

END
GO
PRINT N'Creating [dbo].[GetMatchTeamRequest]...';


GO
CREATE PROCEDURE [dbo].[GetMatchTeamRequest]
	@MatchID BIGINT
AS
BEGIN
	DECLARE @_MatchID BIGINT = @MatchID

	SELECT *
	FROM
		MatchTeamRequests
	WHERE
		MatchID = @_MatchID

END
GO
PRINT N'Creating [dbo].[GetFrecuentlyPlayers]...';


GO
CREATE PROCEDURE [dbo].[GetFrecuentlyPlayers]
	@UserID BIGINT,
	@SportID TINYINT
AS
BEGIN

	SELECT TOP 10 *
	FROM
		Players p
	WHERE
		p.UserID <> @UserID
		AND p.SportID = @SportID
		
END
GO
PRINT N'Creating [dbo].[GetRecommendedPlayers]...';


GO
CREATE PROCEDURE [dbo].[GetRecommendedPlayers]
	@UserID BIGINT,
	@MatchID BIGINT
AS
BEGIN
	
	DECLARE @SportID TINYINT 
	SELECT @SportID = SportID FROM Matches WHERE MatchID = @MatchID

	SELECT TOP 10 p.*
	FROM
		Players p
	WHERE
		p.UserID <> @UserID
		AND p.SportID = @SportID
END
GO
PRINT N'Creating [dbo].[UpdatePlayer]...';


GO
CREATE PROCEDURE [dbo].[UpdatePlayer]
	@PlayerID BIGINT, 
	@Alias NVARCHAR(255),
	@Active BIT
AS
BEGIN
	
	UPDATE 
		Players
	SET 
		Alias = @Alias,
		Active = @Active
	WHERE
		PlayerID = @PlayerID

	RETURN @PlayerID
END
GO
PRINT N'Creating [dbo].[FindPlayer]...';


GO
CREATE PROCEDURE [dbo].[FindPlayer]
	@UserID BIGINT,
	@SportID TINYINT
AS
BEGIN

	SELECT *
	FROM
		Players
	WHERE
		UserID = @UserID 
		AND SportID = @SportID 

END
GO
PRINT N'Creating [dbo].[GetPlayerChallengeTypes]...';


GO
CREATE PROCEDURE [dbo].[GetPlayerChallengeTypes]
	@PlayerID BIGINT
AS
BEGIN

	SELECT C.*
	FROM
		PlayerChallengeTypes P
		INNER JOIN ChallengeTypes C ON C.ChallengeTypeID = P.ChallengeTypeID 
	WHERE
		P.PlayerID = @PlayerID

END
GO
PRINT N'Creating [dbo].[GetPlayerPositions]...';


GO
CREATE PROCEDURE [dbo].[GetPlayerPositions]
	@PlayerID BIGINT
AS
BEGIN

	SELECT FP.* 
	FROM 
		PlayerFieldPositions P
		INNER JOIN FieldPositions FP ON FP.FieldPositionID = P.FieldPositionID
	WHERE
		P.PlayerID = @PlayerID

END
GO
PRINT N'Creating [dbo].[GetPlayerFields]...';


GO
CREATE PROCEDURE [dbo].[GetPlayerFields]
	@PlayerID BIGINT
AS
BEGIN

	SELECT F.* 
	FROM 
		PlayerFields P
		INNER JOIN Fields F ON F.FieldID = P.FieldID
	WHERE 
		P.PlayerID = @PlayerID

END
GO
PRINT N'Creating [dbo].[UpdateAvatar]...';


GO
CREATE PROCEDURE [dbo].[UpdateAvatar]
	@UserID BIGINT,
	@Avatar NVARCHAR(255)
AS
BEGIN
	
	UPDATE Users
	SET Avatar = @Avatar
	WHERE UserID = @UserID
	
	RETURN 1
END
GO
PRINT N'Creating [dbo].[UpdateMatch]...';


GO
CREATE PROCEDURE [dbo].[UpdateMatch]
	@MatchID BIGINT,
	@Name VARCHAR(255), 
	@LocationID BIGINT NULL,
	@HeadquarterID INT NULL, 
	@FieldID INT NULL,
	@Public TINYINT = 0,
	@MatchDateTime DATETIME, 
	@MaxPlayers TINYINT NULL, 
	@MinPlayers TINYINT NULL, 
	@LimitlessPlayers BIT = 0, 
	@MatchTypeID TINYINT, 
	@ChallengeTypeID TINYINT,
	@AverageAge INT NULL, 
	@MatchStateID TINYINT = 1, 
	@Comments NVARCHAR(MAX) = NULL
AS
BEGIN
	
	UPDATE Matches
	SET [Name] = @Name,
		LocationID = @LocationID,
		HeadquarterID = @HeadquarterID,
		FieldID = @FieldID,
		[Public] = @Public,
		MatchDateTime = @MatchDateTime,
		MaxPlayers = @MaxPlayers,
		MinPlayers = @MinPlayers,
		LimitlessPlayers = @LimitlessPlayers,
		MatchTypeID = @MatchTypeID,
		ChallengeTypeID = @ChallengeTypeID,
		AverageAge = @AverageAge,
		MatchStateID = @MatchStateID,
		Comments = @Comments
	WHERE 
		MatchID = @MatchID
	
END
GO
PRINT N'Creating [dbo].[Debug_DropAllFK]...';


GO
CREATE PROCEDURE [dbo].[Debug_DropAllFK]
AS

DECLARE @sql nvarchar(MAX) 
SET @sql = '' 

SELECT @sql = @sql + 'ALTER TABLE ' + QUOTENAME(RC.CONSTRAINT_SCHEMA) 
    + '.' + QUOTENAME(KCU1.TABLE_NAME) 
    + ' DROP CONSTRAINT ' + QUOTENAME(rc.CONSTRAINT_NAME) + '; ' 
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC 

INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU1 
    ON KCU1.CONSTRAINT_CATALOG = RC.CONSTRAINT_CATALOG  
    AND KCU1.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA 
    AND KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME 


-- PRINT @sql 
EXECUTE(@sql)
GO
PRINT N'Creating [dbo].[Debug_DropAll]...';


GO
CREATE PROCEDURE [dbo].[Debug_DropAll]
AS
BEGIN

   EXEC Debug_DropAllFK
   EXEC sp_MSforeachtable @command1 = "DROP TABLE ?"

   DECLARE @procName VARCHAR(500)
   DECLARE cur CURSOR 

   FOR SELECT [name] FROM sys.objects WHERE TYPE = 'p'
   OPEN cur
   FETCH NEXT FROM cur INTO @procName
   WHILE @@FETCH_STATUS = 0
   BEGIN
	  EXEC('drop procedure [' + @procName + ']')
	  FETCH NEXT FROM cur INTO @procName
   END
   CLOSE cur
   DEALLOCATE cur

END
GO
PRINT N'Creating [dbo].[GetHeadquarter]...';


GO
CREATE PROCEDURE [dbo].[GetHeadquarter]
	@HeadquarterID INT
AS
BEGIN
	SELECT 
		HQ.[HeadquarterID],
		HQ.[SportID],
		HQ.[Name],
		HQ.[LocationID],
		L.[Lat] AS LocationLat,
		L.[Lng] AS LocationLng,
		L.[Display] AS LocationDisplay,
		L.[Value] AS LocationValue
	FROM
		Headquarters HQ
		LEFT JOIN Locations L ON HQ.LocationID = L.LocationID
	WHERE
		HeadquarterID = @HeadquarterID
END
GO
PRINT N'Creating [dbo].[GetLocation]...';


GO
CREATE PROCEDURE [dbo].[GetLocation]
	@LocationID BIGINT
AS
	SELECT * FROM Locations WHERE LocationID = @LocationID
GO
PRINT N'Creating [dbo].[UpdateMatchPlayerRequest]...';


GO
CREATE PROCEDURE [dbo].[UpdateMatchPlayerRequest]
	@MatchPlayerRequestID BIGINT,
	@MatchPlayerRequestStateID TINYINT,
	@CommentID BIGINT = NULL
AS
BEGIN
	DECLARE @_MatchPlayerRequestID BIGINT = @MatchPlayerRequestID

	UPDATE MatchPlayerRequests
	SET MatchPlayerRequestStateID  = @MatchPlayerRequestStateID, 
		LastStateChangeDate = GETUTCDATE(),
		CommentID = @CommentID
	WHERE 
		MatchPlayerRequestID = @_MatchPlayerRequestID

	RETURN @@ROWCOUNT
END
GO
PRINT N'Creating [dbo].[GetDefaultUserPrivacy]...';


GO
CREATE PROCEDURE [dbo].[GetDefaultUserPrivacy]
AS
	
	SELECT 
		0 AS UserPrivacyID,
		0 AS UserID,
		D.Entity,
		D.Property,
		D.DefValue AS 'Value'
	FROM 
		UserPrivacyDefault D
GO
PRINT N'Creating [dbo].[POP_UserPrivacyDefault]...';


GO
CREATE PROCEDURE [dbo].[POP_UserPrivacyDefault]
AS
BEGIN

	;MERGE INTO [dbo].[UserPrivacyDefault] AS Target
	USING (VALUES
		(1,'User','MobileNumber','N'),
		(2,'User','BirthDate','N')
	) AS Source ([UserPrivacyDefaultID],[Entity],[Property],[DefValue])
	ON (Target.[UserPrivacyDefaultID] = Source.[UserPrivacyDefaultID])
	WHEN MATCHED THEN
		UPDATE 
		SET [Entity] = Source.[Entity],
			 [Property] = Source.[Property],
			 [DefValue] = Source.[DefValue]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([UserPrivacyDefaultID],
			[Entity],
			[Property],
			[DefValue])
		VALUES
			(Source.[UserPrivacyDefaultID],
			Source.[Entity],
			Source.[Property],
			Source.[DefValue]);

END
GO
PRINT N'Creating [dbo].[GetUserPrivacy]...';


GO
CREATE PROCEDURE [dbo].[GetUserPrivacy]
	@UserID BIGINT
AS
	
	SELECT 
		U.UserPrivacyID,
		ISNULL(U.UserID,@UserID) AS UserID,
		D.Entity,
		D.Property,
		ISNULL(U.[Value], D.DefValue) AS 'Value'
	FROM 
		UserPrivacyDefault D
		LEFT JOIN UserPrivacy U ON U.UserPrivacyDefaultID = D.UserPrivacyDefaultID AND U.UserID = @UserID
GO
PRINT N'Creating [dbo].[UpdateUserPrivacy]...';


GO
CREATE PROCEDURE [dbo].[UpdateUserPrivacy]
	@UserPrivacyID BIGINT,
	@UserID BIGINT,
	@Value CHAR(1)
AS
BEGIN

	UPDATE UserPrivacy
	SET [Value] = @Value
	WHERE
		UserPrivacyID = @UserPrivacyID
		AND UserID = @UserID 

	RETURN @UserPrivacyID
END
GO
PRINT N'Creating [dbo].[AddUserPrivacy]...';


GO
CREATE PROCEDURE [dbo].[AddUserPrivacy]
	@UserID BIGINT,
	@Entity VARCHAR(255),
	@Property VARCHAR(255),
	@Value CHAR(1)
AS
BEGIN

	DECLARE @UserPrivacyDefaultID BIGINT

	SELECT @UserPrivacyDefaultID = UserPrivacyDefaultID 
	FROM UserPrivacyDefault
	WHERE 
		@Entity = Entity
		AND @Property = Property

	IF @UserPrivacyDefaultID IS NULL
	BEGIN
		RETURN -1
	END

	INSERT INTO UserPrivacy
		(UserID,
		UserPrivacyDefaultID,
		[Value])
	VALUES
		(@UserID,
		@UserPrivacyDefaultID,
		@Value)

	RETURN SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[GetMatchesByUser]...';


GO
CREATE PROCEDURE [dbo].[GetMatchesByUser] 
	@UserID BIGINT,
	@SportID TINYINT = NULL,
	@MatchRequestType CHAR(1) = NULL,
	@MatchStateID SMALLINT = NULL,
	@Closed BIT = NULL,
	@PageNumber SMALLINT = 0, --0 = without pagination
 	@PageSize INT = 10, 
	@AscOrder BIT = 1
AS
BEGIN

	DECLARE @Qty BIGINT = @PageSize * @PageNumber

	IF @AscOrder = 1 
	BEGIN
		;WITH x AS (
			SELECT 
				M.MatchID, 
				k = ROW_NUMBER() OVER (ORDER BY M.MatchDateTime ASC) 
			FROM
			Matches M
			INNER JOIN MatchPlayerRequests R ON R.MatchID = M.MatchID 
			INNER JOIN MatchPlayerRequestStates RS ON RS.MatchPlayerRequestStateID = R.MatchPlayerRequestStateID 
			INNER JOIN Players PR ON PR.PlayerID = R.PlayerRequestReceiverID
			INNER JOIN Players PM ON PM.PlayerID = M.PlayerID
			INNER JOIN MatchStates S ON S.MatchStateID = M.MatchStateID AND (@MatchStateID IS NULL OR S.MatchStateID = @MatchStateID)
		WHERE
			PR.UserID = @UserID 
			AND (PM.UserID = @UserID OR (@MatchRequestType IS NULL OR RS.Type = @MatchRequestType))
			AND (@Closed IS NULL OR S.Closed = @Closed)
			AND (@SportID IS NULL OR M.SportID = @SportID)
		)
		SELECT M.*
		FROM x INNER JOIN Matches AS M
		ON x.MatchID = M.MatchID
		WHERE 
			(@PageNumber = 0 
				OR x.k BETWEEN (((@PageNumber - 1) * @PageSize) + 1) AND @Qty)
		ORDER BY x.K;
	
	END ELSE BEGIN
		;WITH x AS (
			SELECT 
				M.MatchID, 
				k = ROW_NUMBER() OVER (ORDER BY M.MatchDateTime DESC) 
			FROM
			Matches M
			INNER JOIN MatchPlayerRequests R ON R.MatchID = M.MatchID 
			INNER JOIN MatchPlayerRequestStates RS ON RS.MatchPlayerRequestStateID = R.MatchPlayerRequestStateID 
			INNER JOIN Players PR ON PR.PlayerID = R.PlayerRequestReceiverID
			INNER JOIN Players PM ON PM.PlayerID = M.PlayerID
			INNER JOIN MatchStates S ON S.MatchStateID = M.MatchStateID AND (@MatchStateID IS NULL OR S.MatchStateID = @MatchStateID)
		WHERE
			PR.UserID = @UserID 
			AND (PM.UserID = @UserID OR (@MatchRequestType IS NULL OR RS.Type = @MatchRequestType))
			AND (@Closed IS NULL OR S.Closed = @Closed)
			AND (@SportID IS NULL OR M.SportID = @SportID)
		)
		SELECT M.*
		FROM x INNER JOIN Matches AS M
		ON x.MatchID = M.MatchID
		WHERE 
			(@PageNumber = 0 
				OR x.k BETWEEN (((@PageNumber - 1) * @PageSize) + 1) AND @Qty)
		ORDER BY x.K;
	END
			
END
GO
PRINT N'Creating [dbo].[GetMatchPlayerRequestsByUserID]...';


GO
CREATE PROCEDURE [dbo].[GetMatchPlayerRequestsByUserID]
	@UserID BIGINT
AS
BEGIN

	DECLARE @_UserID BIGINT = @UserID

	SELECT M.*
	FROM
		MatchPlayerRequests M
		INNER JOIN Players P ON P.PlayerID = M.PlayerRequestReceiverID
	WHERE
		P.UserID = @_UserID

END
GO
PRINT N'Creating [dbo].[GetTopPlayers]...';


GO
CREATE PROCEDURE [dbo].[GetTopPlayers]
AS
BEGIN
	SELECT * FROM Players
END
GO
PRINT N'Creating [dbo].[PURGE_Matches]...';


GO
CREATE PROCEDURE [dbo].[PURGE_Matches]
	@LimitDate DATETIME
AS
BEGIN

	DECLARE @_LimitDate DATETIME = @LimitDate

	DELETE 
		MPR
	FROM 
		MatchPlayerRequests MPR
		INNER JOIN Matches M ON M.MatchID = MPR.MatchID
	WHERE
		M.MatchDateTime < @_LimitDate

	DELETE 
		Matches
	WHERE
		MatchDateTime < @_LimitDate
END
GO
PRINT N'Creating [dbo].[GetMatchPlayerRequest]...';


GO
CREATE PROCEDURE [dbo].[GetMatchPlayerRequest]
	@MatchPlayerRequestID BIGINT
AS
BEGIN
	DECLARE @_MatchPlayerRequestID BIGINT = @MatchPlayerRequestID

	SELECT *
	FROM
		MatchPlayerRequests
	WHERE
		MatchPlayerRequestID = @_MatchPlayerRequestID 

END
GO
PRINT N'Creating [dbo].[AddComment]...';


GO
CREATE PROCEDURE [dbo].[AddComment]
	@Text VARCHAR(MAX),
	@UserID BIGINT
AS
BEGIN

	INSERT INTO Comments
		([Text],
		UserID)
	VALUES
		(@Text,
		@UserID)

	RETURN SCOPE_IDENTITY()

END
GO
PRINT N'Creating [dbo].[POP_MatchStates]...';


GO
CREATE PROCEDURE [dbo].[POP_MatchStates]
AS
BEGIN

	;MERGE INTO [dbo].[MatchStates] AS Target
	USING (VALUES
		(1,'start','Creado',0,0,2),
		(2,'onhold','Pausado',0,0,3),
		(3,'hot','Emergencia',0,1,1),
		(4,'inprogress','Jugando',0,0,4),
		(5,'finished','Terminado',1,0,5),
		(6,'cancelled','Cancelado',1,0,6)		
		
	) AS Source ([MatchStateID],[Value],[Description],[Closed],[Hot],[Order])
	ON (Target.[MatchStateID] = Source.[MatchStateID])
	WHEN MATCHED THEN
		UPDATE 
		SET [Value] = Source.[Value],
			[Description] = Source.[Description],
			[Closed] = Source.[Closed],
			[Hot] = Source.[Hot],
			[Order] = Source.[Order]
	WHEN NOT MATCHED BY TARGET THEN
		INSERT
			([MatchStateID],
			[Value],
			[Description],
			[Closed],
			[Hot],
			[Order])
		VALUES
			(Source.[MatchStateID],
			Source.[Value],
			Source.[Description],
			Source.[Closed],
			Source.[Hot],
			Source.[Order]);
END
GO
PRINT N'Creating [dbo].[JobRefreshStatusMatches]...';


GO
CREATE PROCEDURE [dbo].[JobRefreshStatusMatches]
AS
BEGIN

	DECLARE @SCALAR_MATCHSTATE_FINISHED TINYINT= dbo.Scalar_MatchState_Finished(),
		@SCALAR_MATCHSTATE_INPROGRESS TINYINT= dbo.Scalar_MatchState_InProgress(),
		@UTCNOW DateTime = GETUTCDATE()

	UPDATE Matches
	SET 
		MatchStateID = @SCALAR_MATCHSTATE_INPROGRESS 
	WHERE
		MatchDateTime < @UTCNOW
		AND DATEADD(hh,2,MatchDateTime) > @UTCNOW

	UPDATE Matches
	SET
		MatchStateID = @SCALAR_MATCHSTATE_FINISHED
	WHERE
		DATEADD(hh,2,MatchDateTime) < @UTCNOW
		AND MatchStateID <> @SCALAR_MATCHSTATE_FINISHED
END
GO
PRINT N'Creating [dbo].[JobCloseExpiredMatchPlayerRequests]...';


GO
CREATE PROCEDURE [dbo].[JobCloseExpiredMatchPlayerRequests]
AS
BEGIN

	DECLARE @SCALAR_MATCHPLAYERREQUESTSTATE_EXPIRED TINYINT = dbo.Scalar_MatchPlayerRequestState_Expired(),
			 @SCALAR_MATCHPLAYERREQUESTSTATE_COMPLETED TINYINT = dbo.Scalar_MatchPlayerRequestState_Completed(),
			 @SCALAR_MATCHPLAYERREQUESTSTATE_NOTCOMPLETED TINYINT = dbo.Scalar_MatchPlayerRequestState_NotCompleted(),
			 @SCALAR_MATCHSTATE_FINISHED TINYINT = dbo.Scalar_MatcState_Finished()

	UPDATE MPR
	SET 
		MPR.MatchPlayerRequestStateID = @SCALAR_MATCHPLAYERREQUESTSTATE_COMPLETED
	FROM 
		MatchPlayerRequests MPR
		INNER JOIN MatchPlayerRequestStates RS ON MPR.MatchPlayerRequestStateID = RS.MatchPlayerRequestStateID
		INNER JOIN Matches M ON M.MatchID = MPR.MatchID
	WHERE
		M.MatchStateID = @SCALAR_MATCHSTATE_FINISHED
		AND RS.[Type] = 'P' 
	
	UPDATE MPR
	SET 
		MPR.MatchPlayerRequestStateID = @SCALAR_MATCHPLAYERREQUESTSTATE_EXPIRED
	FROM 
		MatchPlayerRequests MPR
		INNER JOIN MatchPlayerRequestStates RS ON MPR.MatchPlayerRequestStateID = RS.MatchPlayerRequestStateID
		INNER JOIN Matches M ON M.MatchID = MPR.MatchID
	WHERE
		M.MatchStateID = @SCALAR_MATCHSTATE_FINISHED
		AND (RS.[Type] = 'I' OR RS.[Type] = 'T')
		 
	UPDATE MPR
	SET 
		MPR.MatchPlayerRequestStateID = @SCALAR_MATCHPLAYERREQUESTSTATE_COMPLETED
	FROM 
		MatchPlayerRequests MPR
		INNER JOIN MatchPlayerRequestStates RS ON MPR.MatchPlayerRequestStateID = RS.MatchPlayerRequestStateID
		INNER JOIN Matches M ON M.MatchID = MPR.MatchID
	WHERE
		M.MatchStateID = @SCALAR_MATCHSTATE_FINISHED
		AND RS.[Type] = 'N' 

END
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateUser]
	@UserID BIGINT,
	@DefaultSportID INT= NULL,
	@LastActiveSportID INT = NULL,
	@Prefix VARCHAR(255) = NULL,
	@Name VARCHAR(255) = NULL,
	@SecondNames VARCHAR(255) = NULL,
	@LastName VARCHAR(255) = NULL,
	@Suffix VARCHAR(255) = NULL,
	@Alias VARCHAR(255) = NULL,
	@MobileNumber VARCHAR(255) = NULL,
	@LinePhoneNumber VARCHAR(255) = NULL,
	@WebAddress VARCHAR(255) = NULL,
	@BirthDate DATETIME = NULL,
	@Height TINYINT = NULL,
	@Weight TINYINT = NULL,
	@DefaultLanguage VARCHAR(2) = 'EN'
AS
BEGIN

	IF NOT EXISTS(SELECT 1 FROM Users WHERE UserID = @UserID)
		RETURN -1

	UPDATE
		Users
	SET 
		DefaultSportID = @DefaultSportID,
		LastActiveSportID = @LastActiveSportID,
		Prefix = @Prefix,
		Name = @Name,
		SecondNames = @SecondNames,
		LastName = @LastName ,
		Suffix = @Suffix ,
		Alias = @Alias ,
		MobileNumber = @MobileNumber ,
		LinePhoneNumber = @LinePhoneNumber ,
		WebAddress = @WebAddress ,
		BirthDate = @BirthDate,
		Height = @Height ,
		Weight = @Weight,
		DefaultLanguage = @DefaultLanguage
	WHERE
		UserId = @UserID

	RETURN @UserID
END
GO
PRINT N'Creating [dbo].[SearchPlayers]...';


GO
CREATE PROCEDURE [dbo].[SearchPlayers]
	@UserID BIGINT = NULL,
	@SportID TINYINT = NULL,
	@Alias VARCHAR(255) = NULL,
	@Name VARCHAR(255) = NULL,
	@LastName VARCHAR(255) = NULL,
	@Email VARCHAR(255) = NULL,
	@SearchText VARCHAR(255) = NULL,
	@MinAge TINYINT = NULL,
	@MaxAge TINYINT = NULL,
	@LocationID BIGINT = NULL,
	@HeadquarterID INT = NULL,
	@Lat FLOAT = NULL,
	@Lng FLOAT = NULL,
	@TOP SMALLINT = 20,
	@RadiusKM SMALLINT = 10
AS
BEGIN

	SET NOCOUNT ON

	DECLARE @_UserID BIGINT = @UserID,
		@_SportID TINYINT = @SportID,
		@_SearchText VARCHAR(255) = '%' + @SearchText + '%',
		@_Alias VARCHAR(255) = '%' + @Alias + '%',
		@_Name VARCHAR(255) = '%' + @Name + '%',
		@_LastName VARCHAR(255) = '%' + @LastName + '%',
		@_MinAge TINYINT = @MinAge,
		@_MaxAge TINYINT = @MaxAge,
		@_LocationID BIGINT = @LocationID,
		@_HeadquarterID INT = @HeadquarterID,
		@_GeoPosition GEOGRAPHY = NULL,
		@_Email VARCHAR(255) = @Email

	IF (@Lat IS NOT NULL AND @Lng IS NOT NULL) 
	BEGIN
		SET @_GeoPosition = geography::Point(@Lat, @Lng, 4326);
	END 
		
	SELECT DISTINCT TOP(@TOP) P.* 
	FROM
		Players P
		INNER JOIN Users U ON U.UserID = P.UserID AND (@UserID IS NULL OR P.UserID <> @UserID)
		INNER JOIN LoginNames LN ON U.UserID = LN.UserID
		LEFT JOIN MatchesPlayers MP ON MP.PlayerID = P.PlayerID
		LEFT JOIN Matches M ON ( MP.MatchID = M.MatchID ) --M.MatchStateID != 5 AND M.MatchStateID != 4 AND
		LEFT JOIN Locations L ON L.LocationID = M.LocationID AND (@_LocationID IS NULL OR @_LocationID = L.LocationID)
		LEFT JOIN Headquarters H ON H.HeadquarterID = M.HeadquarterID AND (@_HeadquarterID IS NULL OR @_HeadquarterID = H.HeadquarterID)
	WHERE
		(@_SportID IS NULL OR P.SportID = @_SportID) 
		AND (@_Alias IS NULL OR U.[Alias] LIKE @_Alias)
		AND (@_Name IS NULL OR U.[Name] LIKE @_Name)
		AND (@_LastName IS NULL OR U.[LastName] LIKE @_LastName)
		AND (@_Email IS NULL OR LN.LoginName = @_Email)
		AND (@_SearchText IS NULL 
			OR U.[LastName] LIKE @_LastName
			OR U.[Name] LIKE @_SearchText 
			OR U.[Alias] LIKE @_SearchText)
		AND (@_MinAge IS NULL OR @_MinAge < DATEDIFF(DAY, U.BirthDate, GetDate()) / 365.25)
		AND (@_MaxAge IS NULL OR @MaxAge > DATEDIFF(DAY, U.BirthDate, GetDate()) / 365.25)
		AND (@_GeoPosition IS NULL OR (@_GeoPosition.STDistance(geography::Point(ISNULL(L.Lat,0), ISNULL(L.Lng,0), 4326)) < (@RadiusKM * 1000)))
END
GO
PRINT N'Creating [dbo].[Debug_UnlockAll]...';


GO
CREATE PROCEDURE [dbo].[Debug_UnlockAll]
AS
BEGIN

UPDATE LoginNames
Set Locked = 0,
	 VerificationCode = null
	
END
GO
PRINT N'Creating [dbo].[Debug_DeleteAll]...';


GO
CREATE PROCEDURE [dbo].[Debug_DeleteAll]
AS
BEGIN

	EXEC sp_MSForEachTable 'DISABLE TRIGGER ALL ON ?'
	
	EXEC sp_MSForEachTable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'
	
	EXEC sp_MSForEachTable 'DELETE FROM ?'
	
	EXEC sp_MSForEachTable 'ALTER TABLE ? CHECK CONSTRAINT ALL'
	
	EXEC sp_MSForEachTable 'ENABLE TRIGGER ALL ON ?'
	
	EXEC POP_Sports

	EXEC POP_Translations

	EXEC POP_Fields

	EXEC POP_ChallengeTypes

	EXEC POP_Headquarters

	EXEC POP_MatchStates

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '739e2465-e408-4ac8-9a66-e6a829cfa137')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('739e2465-e408-4ac8-9a66-e6a829cfa137')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e79adca3-4ea1-4843-803a-dfcf0f322307')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e79adca3-4ea1-4843-803a-dfcf0f322307')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4e433012-2274-47e3-971c-6468bd18fde6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4e433012-2274-47e3-971c-6468bd18fde6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3e6333ff-babc-4cf1-8775-5fd2dbd11fcf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3e6333ff-babc-4cf1-8775-5fd2dbd11fcf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '05da2c43-8d4b-454a-b675-d63022a0c80a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('05da2c43-8d4b-454a-b675-d63022a0c80a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a841e5e7-7394-4aee-877e-bd1ccfc826aa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a841e5e7-7394-4aee-877e-bd1ccfc826aa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '69f03f69-7f33-494f-ab94-8ee2490e8ab5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('69f03f69-7f33-494f-ab94-8ee2490e8ab5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4d889b14-d09f-4433-a549-43f017a90463')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4d889b14-d09f-4433-a549-43f017a90463')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0600c8ae-f07b-427f-b675-28802ce1cb0c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0600c8ae-f07b-427f-b675-28802ce1cb0c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '891a72c5-bc5e-4d5f-b22f-5a367ed57000')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('891a72c5-bc5e-4d5f-b22f-5a367ed57000')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1ae972e8-f335-4ff8-a7e7-e7e39f7fdfda')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1ae972e8-f335-4ff8-a7e7-e7e39f7fdfda')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '714cc1cc-8617-4537-b40b-9c388dbca99d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('714cc1cc-8617-4537-b40b-9c388dbca99d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd97ac7c0-c967-412b-9207-f41d155951f7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d97ac7c0-c967-412b-9207-f41d155951f7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '36504562-2ebe-4d14-875e-9cf5eeb45056')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('36504562-2ebe-4d14-875e-9cf5eeb45056')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bb5f856f-9b59-409b-981d-f2dcf0d4cbcc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bb5f856f-9b59-409b-981d-f2dcf0d4cbcc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd451faee-f43b-45f4-8d45-620dc80e19af')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d451faee-f43b-45f4-8d45-620dc80e19af')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f3bf4acd-3c19-452a-a367-6546f1115418')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f3bf4acd-3c19-452a-a367-6546f1115418')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7d256b6c-13c8-4dfd-ad6a-87e29a751654')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7d256b6c-13c8-4dfd-ad6a-87e29a751654')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2a395e1b-bf15-4159-901f-7a598f0c57d4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2a395e1b-bf15-4159-901f-7a598f0c57d4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aae89cc4-e2b5-42f0-bcd9-238392609f5a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aae89cc4-e2b5-42f0-bcd9-238392609f5a')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
