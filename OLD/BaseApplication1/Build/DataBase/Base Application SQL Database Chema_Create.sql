/*
Deployment script for BaseApplication

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BaseApplication"
:setvar DefaultFilePrefix "BaseApplication"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Implementations]...';


GO
CREATE TABLE [dbo].[Implementations] (
    [ImplementationID] INT           NOT NULL,
    [Description]      VARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([ImplementationID] ASC)
);


GO
PRINT N'Creating [dbo].[GeneralParameters]...';


GO
CREATE TABLE [dbo].[GeneralParameters] (
    [ImplementationID]   INT            NOT NULL,
    [GeneralParameterID] VARCHAR (255)  NOT NULL,
    [Type]               NVARCHAR (255) NOT NULL,
    [Value]              NVARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([GeneralParameterID] ASC, [ImplementationID] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserID]           BIGINT        IDENTITY (1, 1) NOT NULL,
    [ImplementationID] INT           NOT NULL,
    [Name]             VARCHAR (255) NULL,
    [LastName]         VARCHAR (255) NULL,
    [DateTimeCreated]  DATETIME      NOT NULL,
    [Deleted]          BIT           NOT NULL,
    [DefaultLanguage]  VARCHAR (2)   NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating [dbo].[UserIPAccessStatus]...';


GO
CREATE TABLE [dbo].[UserIPAccessStatus] (
    [ImplementationID] INT           NOT NULL,
    [UserID]           BIGINT        NOT NULL,
    [IP]               VARCHAR (255) NOT NULL,
    [Status]           INT           NOT NULL,
    [DateTimeCreated]  DATETIME      NOT NULL,
    CONSTRAINT [PK_UserIPAccessStatus] PRIMARY KEY CLUSTERED ([UserID] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Sessions]...';


GO
CREATE TABLE [dbo].[Sessions] (
    [SessionID]          BIGINT        IDENTITY (1, 1) NOT NULL,
    [LoginID]            BIGINT        NOT NULL,
    [Session]            VARCHAR (255) NOT NULL,
    [DateTimeCreated]    DATETIME      NOT NULL,
    [DateTimeExpiration] DATETIME      NULL,
    [IP]                 VARCHAR (255) NULL,
    [UserAgent]          VARCHAR (255) NULL,
    CONSTRAINT [PK_Sessions] PRIMARY KEY CLUSTERED ([SessionID] ASC) ON [PRIMARY],
    UNIQUE NONCLUSTERED ([Session] ASC)
);


GO
PRINT N'Creating [dbo].[Sessions].[IX_Sessions_Session]...';


GO
CREATE NONCLUSTERED INDEX [IX_Sessions_Session]
    ON [dbo].[Sessions]([Session] ASC);


GO
PRINT N'Creating [dbo].[LoginPasswords]...';


GO
CREATE TABLE [dbo].[LoginPasswords] (
    [LoginID]  BIGINT        NOT NULL,
    [Password] VARCHAR (255) NOT NULL,
    [Sequence] TINYINT       NOT NULL,
    CONSTRAINT [PK_LoginPasswords] PRIMARY KEY CLUSTERED ([LoginID] DESC, [Password] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[LoginNames]...';


GO
CREATE TABLE [dbo].[LoginNames] (
    [LoginID]                    BIGINT        IDENTITY (1, 1) NOT NULL,
    [ImplementationID]           INT           NOT NULL,
    [UserID]                     BIGINT        NOT NULL,
    [LoginName]                  VARCHAR (255) NOT NULL,
    [Blocked]                    BIT           NULL,
    [Locked]                     BIT           NULL,
    [Deleted]                    BIT           NULL,
    [DateTimeCreated]            DATETIME      NOT NULL,
    [VerificationCode]           VARCHAR (255) NULL,
    [VerificationCodeExpiration] DATETIME      NULL,
    CONSTRAINT [PK_LoginNames] PRIMARY KEY CLUSTERED ([LoginID] DESC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[LoginNames].[IX_LoginNames]...';


GO
CREATE NONCLUSTERED INDEX [IX_LoginNames]
    ON [dbo].[LoginNames]([LoginName] ASC);


GO
PRINT N'Creating [dbo].[MailServerConfigurations]...';


GO
CREATE TABLE [dbo].[MailServerConfigurations] (
    [Name]                  VARCHAR (255) NOT NULL,
    [Subject]               VARCHAR (255) NULL,
    [Body]                  VARCHAR (MAX) NULL,
    [IsBodyHtml]            BIT           NULL,
    [Priority]              TINYINT       NULL,
    [From]                  VARCHAR (255) NOT NULL,
    [Host]                  VARCHAR (255) NOT NULL,
    [Port]                  INT           NULL,
    [EnableSsl]             BIT           NULL,
    [UseDefaultCredentials] BIT           NULL,
    [MailAddress]           VARCHAR (255) NOT NULL,
    [Password]              VARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[Translations]...';


GO
CREATE TABLE [dbo].[Translations] (
    [LanguageCode] CHAR (2)       NOT NULL,
    [Module]       NVARCHAR (60)  NOT NULL,
    [ConstantName] NVARCHAR (255) NOT NULL,
    [Translation]  VARCHAR (MAX)  NOT NULL,
    CONSTRAINT [PK_Translations] PRIMARY KEY CLUSTERED ([ConstantName] ASC, [Module] ASC, [LanguageCode] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[GeneralParameters]...';


GO
ALTER TABLE [dbo].[GeneralParameters]
    ADD DEFAULT 0 FOR [ImplementationID];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [ImplementationID];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [Deleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[UserIPAccessStatus]...';


GO
ALTER TABLE [dbo].[UserIPAccessStatus]
    ADD DEFAULT 0 FOR [ImplementationID];


GO
PRINT N'Creating unnamed constraint on [dbo].[UserIPAccessStatus]...';


GO
ALTER TABLE [dbo].[UserIPAccessStatus]
    ADD DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Sessions]...';


GO
ALTER TABLE [dbo].[Sessions]
    ADD DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[LoginNames]...';


GO
ALTER TABLE [dbo].[LoginNames]
    ADD DEFAULT 0 FOR [ImplementationID];


GO
PRINT N'Creating unnamed constraint on [dbo].[LoginNames]...';


GO
ALTER TABLE [dbo].[LoginNames]
    ADD DEFAULT 0 FOR [Blocked];


GO
PRINT N'Creating unnamed constraint on [dbo].[LoginNames]...';


GO
ALTER TABLE [dbo].[LoginNames]
    ADD DEFAULT 0 FOR [Locked];


GO
PRINT N'Creating unnamed constraint on [dbo].[LoginNames]...';


GO
ALTER TABLE [dbo].[LoginNames]
    ADD DEFAULT 0 FOR [Deleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[LoginNames]...';


GO
ALTER TABLE [dbo].[LoginNames]
    ADD DEFAULT GETUTCDATE() FOR [DateTimeCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT '' FOR [Subject];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT '' FOR [Body];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT 1 FOR [IsBodyHtml];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT 0 FOR [Priority];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT 587 FOR [Port];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT 1 FOR [EnableSsl];


GO
PRINT N'Creating unnamed constraint on [dbo].[MailServerConfigurations]...';


GO
ALTER TABLE [dbo].[MailServerConfigurations]
    ADD DEFAULT 0 FOR [UseDefaultCredentials];


GO
PRINT N'Creating unnamed constraint on [dbo].[Translations]...';


GO
ALTER TABLE [dbo].[Translations]
    ADD DEFAULT '' FOR [Module];


GO
PRINT N'Creating [dbo].[FK_UserIPAccessStatus_Users_UserID]...';


GO
ALTER TABLE [dbo].[UserIPAccessStatus]
    ADD CONSTRAINT [FK_UserIPAccessStatus_Users_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserIPAccessStatus_USers_ImplementationID]...';


GO
ALTER TABLE [dbo].[UserIPAccessStatus]
    ADD CONSTRAINT [FK_UserIPAccessStatus_USers_ImplementationID] FOREIGN KEY ([ImplementationID]) REFERENCES [dbo].[Implementations] ([ImplementationID]);


GO
PRINT N'Creating [dbo].[FK_Sessions_LoginNames_LoginID]...';


GO
ALTER TABLE [dbo].[Sessions]
    ADD CONSTRAINT [FK_Sessions_LoginNames_LoginID] FOREIGN KEY ([LoginID]) REFERENCES [dbo].[LoginNames] ([LoginID]);


GO
PRINT N'Creating [dbo].[FK_LoginPasswords_LoginNames_LoginID]...';


GO
ALTER TABLE [dbo].[LoginPasswords]
    ADD CONSTRAINT [FK_LoginPasswords_LoginNames_LoginID] FOREIGN KEY ([LoginID]) REFERENCES [dbo].[LoginNames] ([LoginID]);


GO
PRINT N'Creating [dbo].[FK_LoginNames_Users_UserID]...';


GO
ALTER TABLE [dbo].[LoginNames]
    ADD CONSTRAINT [FK_LoginNames_Users_UserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[DeleteLogin]...';


GO
CREATE PROCEDURE [dbo].[DeleteLogin]
	@Username VARCHAR(255),
	@ImplementationID INT = 0
AS
	DECLARE 
		@_Username VARCHAR(255) = @Username,
		@_ImplementationID INT = @ImplementationID,
		@LoginID BIGINT 
		
	SELECT 
		@LoginID = [LoginId] 
	FROM 
		LoginNames 
	WHERE 
		UPPER(LoginName) = UPPER(@_Username) 
		AND ImplementationID = @_ImplementationID

	DELETE LoginPasswords
	WHERE LoginID = @LoginID

	DELETE [Sessions]
	WHERE LoginID = @LoginID

	DELETE LoginNames
	WHERE LoginID = @LoginID
GO
PRINT N'Creating [dbo].[ExistsUsername]...';


GO
CREATE PROCEDURE [dbo].[ExistsUsername]
	@Username VARCHAR(255),
	@ImplementationID INT = 0
AS
BEGIN
	DECLARE 
		@_Username VARCHAR(255) = @Username,
		@_ImplementationID INT = @ImplementationID

	IF EXISTS(SELECT 1 FROM LoginNames WHERE [LoginName] = @_Username AND ImplementationID = @_ImplementationID)
		RETURN 1
	RETURN -1
END
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@UserID BIGINT
AS
BEGIN
	DECLARE 
		@_UserID BIGINT = @UserID,
		@LoginID BIGINT

	SELECT TOP 1 @LoginID = LoginID FROM LoginNames WHERE UserID = @_UserID

	DELETE FROM [Sessions] WHERE LoginID = @LoginID

	DELETE FROM LoginPasswords WHERE LoginID = @LoginID

	DELETE FROM LoginNames WHERE LoginID = @LoginID

	DELETE FROM UserIPAccessStatus WHERE UserID = @_UserID

	DELETE FROM Users WHERE UserID = @_UserID

END
GO
PRINT N'Creating [dbo].[DisconnectUser]...';


GO
CREATE PROCEDURE [dbo].[DisconnectUser]
	@UserID BIGINT,
	@ClearSessions BIT
AS
BEGIN
	
	DECLARE 
		@_UserID VARCHAR(255) = @UserID
	
	DELETE TOP (1) S 
		FROM 
			[Sessions] S
			INNER JOIN LoginNames LN ON LN.LoginID = S.LoginID
		WHERE 
			LN.UserID = @_UserID
			

	IF @ClearSessions=1 
	BEGIN

		DELETE S
		FROM 
			[Sessions] S
			INNER JOIN LoginNames LN ON LN.LoginID = S.LoginID
		WHERE 
			LN.UserID = @_UserID
	END
END
GO
PRINT N'Creating [dbo].[RemoveSession]...';


GO
CREATE PROCEDURE [dbo].[RemoveSession]
	@Session VARCHAR(255)
AS
BEGIN
	DECLARE @_Session VARCHAR(255) = @Session

	DELETE FROM [Sessions]
	WHERE [Session] = @_Session 
END
GO
PRINT N'Creating [dbo].[RemoveUser]...';


GO
CREATE PROCEDURE [dbo].[RemoveUser]
	@UserID BIGINT
AS
BEGIN
	DECLARE @_UserID BIGINT = @UserID

	UPDATE Users
	SET Deleted = 1
	WHERE UserID = @_UserID

	UPDATE LoginNames
	SET Deleted = 1
	WHERE UserID = @_UserID

END
GO
PRINT N'Creating [dbo].[EnumUserLogins]...';


GO
CREATE PROCEDURE [dbo].[EnumUserLogins]
	@UserID BIGINT
AS
BEGIN
	DECLARE @_UserID BIGINT = @UserID

	SELECT 
		LoginID,
		LoginName,
		DateTimeCreated 
	FROM 
		LoginNames
	WHERE
		UserID = @_UserID
		AND [Deleted] = 0
END
GO
PRINT N'Creating [dbo].[EnumUserSessions]...';


GO
CREATE PROCEDURE [dbo].[EnumUserSessions]
	@UserID BIGINT
AS
BEGIN
	DECLARE @_UserID BIGINT = @UserID

	SELECT 
		[Session] 
	FROM 
		[Sessions] S
		INNER JOIN  LoginNames LN 
			ON LN.UserID = @_UserID 
			AND LN.Deleted = 0 
			AND LN.LoginID = S.LoginID
END
GO
PRINT N'Creating [dbo].[AddUserLogin]...';


GO
CREATE PROCEDURE [dbo].[AddUserLogin]
	@UserID BIGINT,
	@Username VARCHAR(255),
	@Password VARCHAR(255),
	@ImplementationID INT = NULL
AS BEGIN
	DECLARE 
		@Sequence TINYINT = 1,
		@LoginID BIGINT = 0,
		@_ImplementationID INT = @ImplementationID,
		@_UserID BIGINT = @UserID,
		@_Username VARCHAR(255) = @Username

	IF NOT EXISTS(SELECT 1 FROM Users WHERE ImplementationID = ISNULL(@_ImplementationID,ImplementationID) AND UserID = @_UserID) BEGIN
		RETURN -2
	END

	IF NOT EXISTS(SELECT 1 FROM LoginNames WHERE UserID <> @_UserID AND LoginName = @_Username) BEGIN
		SELECT @ImplementationID = ImplementationID FROM Users WHERE UserID = @_UserID

		IF NOT EXISTS(SELECT 1 FROM LoginNames WHERE UserID = @_UserID AND LoginName = @_Username) BEGIN
			INSERT INTO LoginNames
				(ImplementationID,UserID,LoginName,Blocked,Locked,Deleted)
			VALUES
				(ISNULL(@ImplementationID,0),@UserID,@Username,0,0,0)

			SET @LoginID = SCOPE_IDENTITY()
		END ELSE BEGIN
			SELECT @LoginID = LoginID FROM LoginNames WHERE UserID = @_UserID AND LoginName = @_Username 
			SELECT @Sequence = MAX([Sequence]) + 1 FROM LoginPasswords WHERE LoginID = @LoginID 
		END
		
		INSERT INTO LoginPasswords
			(LoginID,[Password],[Sequence])
		VALUES
			(@LoginID,@Password,@Sequence)
	END ELSE BEGIN
		SET @LoginID = -1
	END

	RETURN @LoginID
END
GO
PRINT N'Creating [dbo].[AddUser]...';


GO
CREATE PROCEDURE [dbo].[AddUser]
	@Username VARCHAR(255),
	@Password VARCHAR(255),
	@Name VARCHAR(255),
	@LastName VARCHAR(255),
	@ImplementationID INT = 0,
	@VerificationCode VARCHAR(255) = null,
	@DefaultLanguage VARCHAR(2) = 'EN'
AS BEGIN
	DECLARE
		@_Username VARCHAR(255) = @Username,
		@_ImplementationID INT = @ImplementationID,
		@Lock BIT = 0

	IF (ISNULL(@ImplementationID,0) = 0) AND NOT EXISTS(SELECT 1 FROM Implementations WHERE ImplementationID = 0)
	BEGIN
		INSERT INTO Implementations (ImplementationID,[Description]) VALUES (0,'Default')
	END

	IF EXISTS(SELECT 1 FROM LoginNames WHERE LoginName = @_Username AND ImplementationID = @_ImplementationID )
	BEGIN
		RETURN -1
	END
	
	IF @VerificationCode IS NOT NULL
	BEGIN
		SET @Lock = 1
	END

	INSERT INTO Users
		(ImplementationID,
		Name,
		LastName,
		DefaultLanguage)
	VALUES
		(@ImplementationID,
		@Name,
		@LastName,
		@DefaultLanguage)

	DECLARE @UserID BIGINT = SCOPE_IDENTITY()

	INSERT INTO LoginNames
		([ImplementationID],
		[UserID],
		[LoginName],
		[Blocked],
		[Locked],
		[Deleted],
		[VerificationCode])
	VALUES
		(@ImplementationID,
		@UserID,
		@Username,
		0,
		@Lock,
		0,
		@VerificationCode)
	
	DECLARE @LoginID BIGINT = SCOPE_IDENTITY()
	
	INSERT INTO LoginPasswords
		([LoginID],
		[Password],
		[Sequence])
	VALUES
		(@LoginID,
		@Password,
		1)

	RETURN @UserID
END
GO
PRINT N'Creating [dbo].[SetSession]...';


GO
CREATE PROCEDURE [dbo].[SetSession]
	@LoginID BIGINT,
	@Session VARCHAR(255),
	@IP VARCHAR(255),
	@UserAgent VARCHAR(255),
	@Unique BIT
AS
BEGIN

	DECLARE 
		@Result BIGINT = -1,
		@_LoginID BIGINT = @LoginID

	IF EXISTS(SELECT TOP 1 1 FROM LoginNames WHERE LoginID = @_LoginID)
	BEGIN
		IF @Unique = 1
			DELETE FROM 
				[Sessions]
			WHERE 
				LoginID = @_LoginID

		INSERT INTO [Sessions] 
			(LoginID,
			[Session],
			DateTimeCreated,
			IP,
			UserAgent)
		VALUES
			(@LoginID,
			@Session,
			GETUTCDATE(),
			@IP,
			@UserAgent)
		
		SET @Result = SCOPE_IDENTITY()	
	END
	
	RETURN @Result

END
GO
PRINT N'Creating [dbo].[GetLoginPasswords]...';


GO
CREATE PROCEDURE [dbo].[GetLoginPasswords]
	@LoginName VARCHAR(MAX),
	@IP VARCHAR(255),
	@ImplementationID INT = 0
AS
BEGIN

	DECLARE
		@_LoginName VARCHAR(MAX) = @LoginName,
		@_IP VARCHAR(255) = @IP,
		@_ImplementationID INT = @ImplementationID

	DECLARE @Passwords TABLE
		(UserID BIGINT,
		LoginID BIGINT,
		[Password] VARCHAR(255),
		[Sequence] TINYINT)

	IF NOT EXISTS (SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_LoginName)
		INSERT INTO @Passwords (UserID) VALUES (-1)
	ELSE IF EXISTS (SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_LoginName AND Deleted = 1)
		INSERT INTO @Passwords (UserID) VALUES (-2)
	ELSE IF EXISTS (SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_LoginName AND Blocked = 1)
		INSERT INTO @Passwords (UserID) VALUES (-3)
	ELSE IF EXISTS (SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_LoginName AND Locked = 1)
		INSERT INTO @Passwords (UserID) VALUES (-4)
	ELSE IF EXISTS (SELECT 1 FROM LoginNames LN 
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE LoginName = @_LoginName
								AND UIP.IP = '0'
								AND UIP.Status = 1
								AND LN.ImplementationID = @_ImplementationID)
	BEGIN
		IF EXISTS (SELECT 1 FROM LoginNames LN 
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE LoginName = @_LoginName
								AND UIP.IP = @_IP
								AND UIP.Status = 2
								AND LN.ImplementationID = @_ImplementationID)
			INSERT INTO @Passwords (UserID) VALUES (-5)								
	END	ELSE IF EXISTS (SELECT 1 FROM LoginNames LN 
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE LoginName = @_LoginName
								AND UIP.IP = '0'
								AND UIP.Status = 2
								AND LN.ImplementationID = @_ImplementationID)
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM LoginNames LN 
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE LoginName = @_LoginName
								AND UIP.IP = @_IP
								AND UIP.Status = 1
								AND LN.ImplementationID = @_ImplementationID)
			INSERT INTO @Passwords (UserID) VALUES (-6)	
	END ELSE BEGIN
		
		INSERT INTO @Passwords (UserID, LoginID, [Password], [Sequence]) 
		SELECT 		
			N.UserID,
			N.LoginID,
			P.[Password],
			P.[Sequence]
		FROM 
			LoginNames N
			INNER JOIN LoginPasswords P ON (P.LoginID = N.LoginID)
		WHERE 
			LoginName = @_LoginName
			AND ImplementationID = @_ImplementationID
		ORDER BY
			[Sequence] ASC
	END

	SELECT 
		P.UserID, 
		P.LoginID, 
		P.[Password],
		P.[Sequence]
	FROM
		@Passwords P

END
GO
PRINT N'Creating [dbo].[ValidateUsername]...';


GO
CREATE PROCEDURE [dbo].[ValidateUsername]
	@Username VARCHAR(255)
AS
	DECLARE @_Username VARCHAR(255) = @Username

	RETURN ISNULL((SELECT 1 from LoginNames WHERE LoginName = @_Username),0)
GO
PRINT N'Creating [dbo].[Logout]...';


GO
CREATE PROCEDURE [dbo].[Logout]
	@Session VARCHAR(255),
	@LoginID BIGINT = NULL,
	@AllSessions BIT = 0
AS
BEGIN

	DECLARE 
		@UserID BIGINT,
		@_LoginID BIGINT = @LoginID,
		@_Session VARCHAR(255) = @Session

	SELECT 
		TOP 1 @UserID = LN.UserID 
	FROM 
		LoginNames LN 
		INNER JOIN [Sessions] S ON [Session] = @_Session AND LN.LoginID = S.LoginID
	WHERE 
		LN.LoginID = @_LoginID OR @_LoginID IS NULL

	DELETE S
	FROM 
		[Sessions] S
		INNER JOIN LoginNames L ON L.LoginID = S.LoginID AND L.UserID = @UserID
	WHERE 
		S.[Session] = @_Session
		OR (@AllSessions = 1)
END
GO
PRINT N'Creating [dbo].[AuthenticateSession]...';


GO
CREATE PROCEDURE [dbo].[AuthenticateSession]
	@Session VARCHAR(255),
	@IP VARCHAR(255) = NULL,
	@UserAgent VARCHAR(255) = NULL
AS
	
	DECLARE @Succeed INT = 0
	IF NOT EXISTS (SELECT 1 FROM [Sessions] S WHERE S.[Session] = @Session)
		SET @Succeed = -1
	--IF EXISTS (SELECT 1 FROM [Sessions] S	WHERE S.DateTimeCreated < GETUTCDATE - dbo.MaxDateTimeExpirationLogin) SET @Succeed = -2
	--IF EXISTS (SELECT 1 FROM [Sessions] S WHERE S.DateTimeExpiration < GETUTCDATE - dbo.DateTimeExpirationLogin) SET @Succeed = -3
	ELSE IF EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
						WHERE S.[Session] = @Session AND LN.Deleted = 1)
		SET @Succeed = -4
	ELSE IF EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
						WHERE S.[Session] = @Session AND LN.Blocked = 1)
		SET @Succeed = -5
	ELSE IF EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
						WHERE S.[Session] = @Session AND LN.Locked = 1)
		SET @Succeed = -6
	ELSE IF EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE S.[Session] = @Session
								AND UIP.IP = '0'
								AND UIP.Status = 1) 
	BEGIN --IF IP is blocked
		IF EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE S.[Session] = @Session
								AND UIP.IP = @IP
								AND UIP.Status = 2)
			SET @Succeed = -7 
	END
	ELSE IF EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE S.[Session] = @Session
								AND UIP.IP = '0'
								AND UIP.Status = 2) 
	BEGIN --IF IP is allowed
		IF NOT EXISTS (SELECT 1 FROM [Sessions] S
							INNER JOIN LoginNames LN ON S.LoginID = LN.LoginID
								INNER JOIN UserIPAccessStatus UIP ON LN.UserID = UIP.UserID 
							WHERE S.[Session] = @Session
								AND UIP.IP = @IP
								AND UIP.Status = 1)
			SET @Succeed = -8
	END 
	ELSE 
	BEGIN
		SELECT 		
			@Succeed = N.UserID
		FROM 
			LoginNames N
			INNER JOIN [Sessions] S ON (S.LoginID = N.LoginID)
		WHERE 
			S.[Session] = @Session

		UPDATE [Sessions]
		SET IP = @IP,
			UserAgent = @UserAgent
		WHERE
			[Session] = @Session
			
	END

	RETURN @Succeed
GO
PRINT N'Creating [dbo].[ChangePassword]...';


GO
CREATE PROCEDURE [dbo].[ChangePassword]
	@UserID BIGINT,
	@Password VARCHAR(255),
	@LoginName VARCHAR(255) = NULL
AS
BEGIN

	UPDATE P
	SET 
		[Password] = @Password
	FROM
		LoginPasswords P
		INNER JOIN LoginNames N ON P.LoginID = N.LoginID
	WHERE
		N.UserID = @UserID
		OR N.LoginName = @LoginName

	RETURN @@ROWCOUNT
END
GO
PRINT N'Creating [dbo].[GetLoginPasswordsByUserID]...';


GO
CREATE PROCEDURE [dbo].[GetLoginPasswordsByUserID]
	@UserID BIGINT,
	@IP VARCHAR(255) = NULL,
	@ImplementationID INT = 0
AS
BEGIN

	DECLARE
		@_UserID VARCHAR(MAX) = @UserID,
		@_IP VARCHAR(255) = @IP,
		@_ImplementationID INT = @ImplementationID

	SELECT N.LoginID,
			N.ImplementationID,
			N.UserID,
			N.LoginName,
			N.Blocked,
			N.Deleted,
			N.DateTimeCreated,
			N.VerificationCode,
			N.VerificationCodeExpiration,
			P.[Password],
			P.[Sequence]
	FROM 
		LoginNames N
		INNER JOIN LoginPasswords P ON N.LoginID = P.LoginID
	WHERE
		UserID = @_UserID
		AND Deleted = 0
	ORDER BY
		N.UserID,
		N.LoginID,
		P.[Sequence]

END
GO
PRINT N'Creating [dbo].[GetMailServerConfiguration]...';


GO
CREATE PROCEDURE [dbo].[GetMailServerConfiguration]
AS
	SELECT 
		[Name],
		[Subject],
		[Body],
		[IsBodyHtml],
		[Priority],
		[From],
		[Host],
		[Port],
		[EnableSsl] ,
		[UseDefaultCredentials],
		[MailAddress],
		[Password]
	FROM
		[MailServerConfigurations]
GO
PRINT N'Creating [dbo].[GetTranslations]...';


GO
CREATE PROCEDURE [dbo].[GetTranslations]
AS
BEGIN
	SELECT
		LanguageCode,
		Module,
		ConstantName,
		Translation
	FROM 
		Translations
END
GO
PRINT N'Creating [dbo].[VerifyUserEmail]...';


GO
CREATE PROCEDURE [dbo].[VerifyUserEmail]
	@Username VARCHAR(255),
	@VerificationCode VARCHAR(255),
	@ImplementationID INT = 0
AS
BEGIN
	DECLARE 
		@_Username VARCHAR(255) = @Username,
		@_ImplementationID INT = ISNULL(@ImplementationID,0)

	IF NOT EXISTS(SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_Username)
	BEGIN
		RETURN -1
	END
	IF EXISTS(SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_Username AND VerificationCode IS NULL)
	BEGIN
		RETURN -2
	END
	IF NOT EXISTS(SELECT 1 FROM LoginNames WHERE ImplementationID = @_ImplementationID AND LoginName = @_Username AND VerificationCode = @VerificationCode)
	BEGIN
		RETURN -3
	END

	UPDATE 
		LoginNames
	SET
		Locked = 0,
		VerificationCode = null
	WHERE ImplementationID = @_ImplementationID 
		AND LoginName = @_Username

	RETURN 0
END
GO
PRINT N'Creating [dbo].[SetGeneralParameter]...';


GO
CREATE PROCEDURE [dbo].[SetGeneralParameter]
	@ImplementationID INT = 0,
	@GeneralParameterID VARCHAR(255),
	@Type VARCHAR(255),
	@Value VARCHAR(255)
AS
BEGIN
	DECLARE 
		@_ImplementationID INT = @ImplementationID,
		@_GeneralParameterID VARCHAR(255) = @GeneralParameterID,
		@_Type VARCHAR(255) = @Type,
		@_Value VARCHAR(255) = @Value

	IF EXISTS(SELECT 1 FROM GeneralParameters WHERE ImplementationID = @_ImplementationID AND GeneralParameterID = @_GeneralParameterID)
	BEGIN
		UPDATE GeneralParameters
		SET 
			[Type] = @_Type,
			[Value] = @_Value
		WHERE
			ImplementationID = @_ImplementationID
			AND GeneralParameterID = @_GeneralParameterID
	END ELSE BEGIN
		INSERT INTO GeneralParameters
			(ImplementationID,
			GeneralParameterID,
			[Type],
			[Value])
		VALUES
			(@_ImplementationID,
			@_GeneralParameterID,
			@_Type,
			@_Value)
	END
END
GO
PRINT N'Creating [dbo].[GetAllGeneralParameters]...';


GO
CREATE PROCEDURE [dbo].[GetAllGeneralParameters]
	@ImplementationID INT = 0
AS
BEGIN
	DECLARE @_ImplementationID INT = @ImplementationID

	SELECT 
		GeneralParameterID,
		[Type],
		[Value]
	FROM
		GeneralParameters
	WHERE 
		ImplementationID = @_ImplementationID
		OR ( NOT EXISTS(SELECT 1 FROM GeneralParameters WHERE ImplementationID = @_ImplementationID)
			AND ImplementationID = 0)
END
GO
PRINT N'Creating [dbo].[RemoveAllUserSession]...';


GO
CREATE PROCEDURE [dbo].[RemoveAllUserSession]
	@UserID BIGINT
AS
BEGIN
	DECLARE @_UserID BIGINT = @UserID

	DELETE S 
	FROM 
		[Sessions] S
		INNER JOIN LoginNames LN ON LN.UserID = @_UserID AND LN.LoginID = S.LoginID
END
GO
PRINT N'Creating [dbo].[GetUserVerificationCode]...';


GO
CREATE PROCEDURE [dbo].[GetUserVerificationCode]  
 @Username VARCHAR(255),  
 @ImplementationID int = 0  
AS  
BEGIN  
  
 SELECT  
  L.VerificationCode  
 FROM  
  LoginNames L  
 WHERE  
  L.LoginName = @Username  
  AND L.ImplementationID = @ImplementationID  
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '80e73452-63a5-4260-816b-f91d6c9b79a6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('80e73452-63a5-4260-816b-f91d6c9b79a6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '93de9feb-9826-4398-b68d-8a3801340324')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('93de9feb-9826-4398-b68d-8a3801340324')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '521f7384-48fd-423f-907f-e9d637d7b2d9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('521f7384-48fd-423f-907f-e9d637d7b2d9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3a7aa2b1-6421-4427-9229-116f07610e5c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3a7aa2b1-6421-4427-9229-116f07610e5c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6eee8929-cc36-4332-a2f1-6d18553e7132')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6eee8929-cc36-4332-a2f1-6d18553e7132')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0a898e90-5542-4a56-b094-79e91dac0590')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0a898e90-5542-4a56-b094-79e91dac0590')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '660f6c18-0a1f-4fb7-8796-50cdc34cedba')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('660f6c18-0a1f-4fb7-8796-50cdc34cedba')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'be9685b4-8de8-4e4c-ae49-c33995fb3116')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('be9685b4-8de8-4e4c-ae49-c33995fb3116')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '91c06bdf-61f5-4339-8d15-0768117882ca')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('91c06bdf-61f5-4339-8d15-0768117882ca')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '08f9e289-06c0-4563-9cc9-5548905712cc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('08f9e289-06c0-4563-9cc9-5548905712cc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9392da0c-1a7c-4c66-84bf-d82226fb1337')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9392da0c-1a7c-4c66-84bf-d82226fb1337')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
